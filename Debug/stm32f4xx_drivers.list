
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027a0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08002950  08002950  00012950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ac0  08002ac0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002ac0  08002ac0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ac0  08002ac0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ac0  08002ac0  00012ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ac4  08002ac4  00012ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000078  08002b40  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002b40  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004a18  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000e32  00000000  00000000  00024ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003b8  00000000  00000000  000258f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000330  00000000  00000000  00025cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003e4b  00000000  00000000  00025fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000046af  00000000  00000000  00029e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000ccaa  00000000  00000000  0002e4da  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003b184  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001520  00000000  00000000  0003b200  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002938 	.word	0x08002938

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08002938 	.word	0x08002938

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <init_systick_timer>:
/* Enable this macro if you want to test RTC on LCD */
//#define PRINT_LCD


void init_systick_timer(uint32_t tick_hz)
{
 8000290:	b480      	push	{r7}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000298:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <init_systick_timer+0x60>)
 800029a:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 800029c:	4b15      	ldr	r3, [pc, #84]	; (80002f4 <init_systick_timer+0x64>)
 800029e:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80002a0:	4a15      	ldr	r2, [pc, #84]	; (80002f8 <init_systick_timer+0x68>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a8:	3b01      	subs	r3, #1
 80002aa:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 80002b2:	697b      	ldr	r3, [r7, #20]
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	431a      	orrs	r2, r3
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f043 0202 	orr.w	r2, r3, #2
 80002c6:	693b      	ldr	r3, [r7, #16]
 80002c8:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80002ca:	693b      	ldr	r3, [r7, #16]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f043 0204 	orr.w	r2, r3, #4
 80002d2:	693b      	ldr	r3, [r7, #16]
 80002d4:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 80002d6:	693b      	ldr	r3, [r7, #16]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f043 0201 	orr.w	r2, r3, #1
 80002de:	693b      	ldr	r3, [r7, #16]
 80002e0:	601a      	str	r2, [r3, #0]

}
 80002e2:	bf00      	nop
 80002e4:	371c      	adds	r7, #28
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000e014 	.word	0xe000e014
 80002f4:	e000e010 	.word	0xe000e010
 80002f8:	00f42400 	.word	0x00f42400

080002fc <get_day_of_week>:


char* get_day_of_week(uint8_t i)
{
 80002fc:	b4b0      	push	{r4, r5, r7}
 80002fe:	b08b      	sub	sp, #44	; 0x2c
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
	char* days[] = { "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <get_day_of_week+0x38>)
 8000308:	f107 040c 	add.w	r4, r7, #12
 800030c:	461d      	mov	r5, r3
 800030e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000312:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000316:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[i-1];
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	3b01      	subs	r3, #1
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000324:	4413      	add	r3, r2
 8000326:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 800032a:	4618      	mov	r0, r3
 800032c:	372c      	adds	r7, #44	; 0x2c
 800032e:	46bd      	mov	sp, r7
 8000330:	bcb0      	pop	{r4, r5, r7}
 8000332:	4770      	bx	lr
 8000334:	08002994 	.word	0x08002994

08000338 <number_to_string>:


void number_to_string(uint8_t num , char* buf)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	6039      	str	r1, [r7, #0]
 8000342:	71fb      	strb	r3, [r7, #7]

	if(num < 10){
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	2b09      	cmp	r3, #9
 8000348:	d809      	bhi.n	800035e <number_to_string+0x26>
		buf[0] = '0';
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	2230      	movs	r2, #48	; 0x30
 800034e:	701a      	strb	r2, [r3, #0]
		buf[1] = num+48;
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	3301      	adds	r3, #1
 8000354:	79fa      	ldrb	r2, [r7, #7]
 8000356:	3230      	adds	r2, #48	; 0x30
 8000358:	b2d2      	uxtb	r2, r2
 800035a:	701a      	strb	r2, [r3, #0]
	}else if(num >= 10 && num < 99)
	{
		buf[0] = (num/10) + 48;
		buf[1]= (num % 10) + 48;
	}
}
 800035c:	e01f      	b.n	800039e <number_to_string+0x66>
	}else if(num >= 10 && num < 99)
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	2b09      	cmp	r3, #9
 8000362:	d91c      	bls.n	800039e <number_to_string+0x66>
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	2b62      	cmp	r3, #98	; 0x62
 8000368:	d819      	bhi.n	800039e <number_to_string+0x66>
		buf[0] = (num/10) + 48;
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	4a0f      	ldr	r2, [pc, #60]	; (80003ac <number_to_string+0x74>)
 800036e:	fba2 2303 	umull	r2, r3, r2, r3
 8000372:	08db      	lsrs	r3, r3, #3
 8000374:	b2db      	uxtb	r3, r3
 8000376:	3330      	adds	r3, #48	; 0x30
 8000378:	b2da      	uxtb	r2, r3
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	701a      	strb	r2, [r3, #0]
		buf[1]= (num % 10) + 48;
 800037e:	79fa      	ldrb	r2, [r7, #7]
 8000380:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <number_to_string+0x74>)
 8000382:	fba3 1302 	umull	r1, r3, r3, r2
 8000386:	08d9      	lsrs	r1, r3, #3
 8000388:	460b      	mov	r3, r1
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	440b      	add	r3, r1
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	1ad3      	subs	r3, r2, r3
 8000392:	b2da      	uxtb	r2, r3
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	3301      	adds	r3, #1
 8000398:	3230      	adds	r2, #48	; 0x30
 800039a:	b2d2      	uxtb	r2, r2
 800039c:	701a      	strb	r2, [r3, #0]
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	cccccccd 	.word	0xcccccccd

080003b0 <time_to_string>:



//hh:mm:ss
char* time_to_string(RTC_time_t *rtc_time)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= ':';
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <time_to_string+0x48>)
 80003ba:	223a      	movs	r2, #58	; 0x3a
 80003bc:	709a      	strb	r2, [r3, #2]
	buf[5]= ':';
 80003be:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <time_to_string+0x48>)
 80003c0:	223a      	movs	r2, #58	; 0x3a
 80003c2:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours,buf);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	789b      	ldrb	r3, [r3, #2]
 80003c8:	490b      	ldr	r1, [pc, #44]	; (80003f8 <time_to_string+0x48>)
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ffb4 	bl	8000338 <number_to_string>
	number_to_string(rtc_time->minutes,&buf[3]);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	785b      	ldrb	r3, [r3, #1]
 80003d4:	4909      	ldr	r1, [pc, #36]	; (80003fc <time_to_string+0x4c>)
 80003d6:	4618      	mov	r0, r3
 80003d8:	f7ff ffae 	bl	8000338 <number_to_string>
	number_to_string(rtc_time->seconds,&buf[6]);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	4907      	ldr	r1, [pc, #28]	; (8000400 <time_to_string+0x50>)
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ffa8 	bl	8000338 <number_to_string>

	buf[8] = '\0';
 80003e8:	4b03      	ldr	r3, [pc, #12]	; (80003f8 <time_to_string+0x48>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	721a      	strb	r2, [r3, #8]

	return buf;
 80003ee:	4b02      	ldr	r3, [pc, #8]	; (80003f8 <time_to_string+0x48>)

}
 80003f0:	4618      	mov	r0, r3
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000094 	.word	0x20000094
 80003fc:	20000097 	.word	0x20000097
 8000400:	2000009a 	.word	0x2000009a

08000404 <date_to_string>:

//dd/mm/yy
char* date_to_string(RTC_date_t *rtc_date)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= '/';
 800040c:	4b0f      	ldr	r3, [pc, #60]	; (800044c <date_to_string+0x48>)
 800040e:	222f      	movs	r2, #47	; 0x2f
 8000410:	709a      	strb	r2, [r3, #2]
	buf[5]= '/';
 8000412:	4b0e      	ldr	r3, [pc, #56]	; (800044c <date_to_string+0x48>)
 8000414:	222f      	movs	r2, #47	; 0x2f
 8000416:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date,buf);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	490b      	ldr	r1, [pc, #44]	; (800044c <date_to_string+0x48>)
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff ff8a 	bl	8000338 <number_to_string>
	number_to_string(rtc_date->month,&buf[3]);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	785b      	ldrb	r3, [r3, #1]
 8000428:	4909      	ldr	r1, [pc, #36]	; (8000450 <date_to_string+0x4c>)
 800042a:	4618      	mov	r0, r3
 800042c:	f7ff ff84 	bl	8000338 <number_to_string>
	number_to_string(rtc_date->year,&buf[6]);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	789b      	ldrb	r3, [r3, #2]
 8000434:	4907      	ldr	r1, [pc, #28]	; (8000454 <date_to_string+0x50>)
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ff7e 	bl	8000338 <number_to_string>

	buf[8]= '\0';
 800043c:	4b03      	ldr	r3, [pc, #12]	; (800044c <date_to_string+0x48>)
 800043e:	2200      	movs	r2, #0
 8000440:	721a      	strb	r2, [r3, #8]

	return buf;
 8000442:	4b02      	ldr	r3, [pc, #8]	; (800044c <date_to_string+0x48>)

}
 8000444:	4618      	mov	r0, r3
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	200000a0 	.word	0x200000a0
 8000450:	200000a3 	.word	0x200000a3
 8000454:	200000a6 	.word	0x200000a6

08000458 <main>:
{
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
}

int main(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0

	RTC_time_t current_time;
	RTC_date_t current_date;

	printf("RTC test\n");
 800045e:	4831      	ldr	r0, [pc, #196]	; (8000524 <main+0xcc>)
 8000460:	f001 fb96 	bl	8001b90 <puts>

	lcd_init();
 8000464:	f000 fbde 	bl	8000c24 <lcd_init>

	lcd_print_string("RTC Test...");
 8000468:	482f      	ldr	r0, [pc, #188]	; (8000528 <main+0xd0>)
 800046a:	f000 fbc7 	bl	8000bfc <lcd_print_string>
	//mdelay(2000);

	//lcd_display_clear();
	//lcd_display_return_home();

	if(ds1307_init()){
 800046e:	f000 f999 	bl	80007a4 <ds1307_init>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d003      	beq.n	8000480 <main+0x28>
		printf("RTC init has failed\n");
 8000478:	482c      	ldr	r0, [pc, #176]	; (800052c <main+0xd4>)
 800047a:	f001 fb89 	bl	8001b90 <puts>
		while(1);
 800047e:	e7fe      	b.n	800047e <main+0x26>
	}

	init_systick_timer(1);
 8000480:	2001      	movs	r0, #1
 8000482:	f7ff ff05 	bl	8000290 <init_systick_timer>

	current_date.day = FRIDAY;
 8000486:	2306      	movs	r3, #6
 8000488:	71fb      	strb	r3, [r7, #7]
	current_date.date = 19;
 800048a:	2313      	movs	r3, #19
 800048c:	713b      	strb	r3, [r7, #4]
	current_date.month = 4;
 800048e:	2304      	movs	r3, #4
 8000490:	717b      	strb	r3, [r7, #5]
	current_date.year = 24;
 8000492:	2318      	movs	r3, #24
 8000494:	71bb      	strb	r3, [r7, #6]

	current_time.hours = 8;
 8000496:	2308      	movs	r3, #8
 8000498:	72bb      	strb	r3, [r7, #10]
	current_time.minutes = 7;
 800049a:	2307      	movs	r3, #7
 800049c:	727b      	strb	r3, [r7, #9]
	current_time.seconds = 30;
 800049e:	231e      	movs	r3, #30
 80004a0:	723b      	strb	r3, [r7, #8]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 80004a2:	2301      	movs	r3, #1
 80004a4:	72fb      	strb	r3, [r7, #11]

	ds1307_set_current_date(&current_date);
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 f9e2 	bl	8000872 <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 80004ae:	f107 0308 	add.w	r3, r7, #8
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 f994 	bl	80007e0 <ds1307_set_current_time>

	ds1307_get_current_time(&current_time);
 80004b8:	f107 0308 	add.w	r3, r7, #8
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 fa08 	bl	80008d2 <ds1307_get_current_time>
	ds1307_get_current_date(&current_date);
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4618      	mov	r0, r3
 80004c6:	f000 fa4d 	bl	8000964 <ds1307_get_current_date>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 80004ca:	7afb      	ldrb	r3, [r7, #11]
 80004cc:	2b02      	cmp	r3, #2
 80004ce:	d013      	beq.n	80004f8 <main+0xa0>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 80004d0:	7afb      	ldrb	r3, [r7, #11]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <main+0x82>
 80004d6:	4b16      	ldr	r3, [pc, #88]	; (8000530 <main+0xd8>)
 80004d8:	e000      	b.n	80004dc <main+0x84>
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <main+0xdc>)
 80004dc:	60fb      	str	r3, [r7, #12]
		//printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
		lcd_print_string(time_to_string(&current_time));
 80004de:	f107 0308 	add.w	r3, r7, #8
 80004e2:	4618      	mov	r0, r3
 80004e4:	f7ff ff64 	bl	80003b0 <time_to_string>
 80004e8:	4603      	mov	r3, r0
 80004ea:	4618      	mov	r0, r3
 80004ec:	f000 fb86 	bl	8000bfc <lcd_print_string>
		lcd_print_string(am_pm);
 80004f0:	68f8      	ldr	r0, [r7, #12]
 80004f2:	f000 fb83 	bl	8000bfc <lcd_print_string>
 80004f6:	e008      	b.n	800050a <main+0xb2>
	}else{
		//printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
		lcd_print_string(time_to_string(&current_time));
 80004f8:	f107 0308 	add.w	r3, r7, #8
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff ff57 	bl	80003b0 <time_to_string>
 8000502:	4603      	mov	r3, r0
 8000504:	4618      	mov	r0, r3
 8000506:	f000 fb79 	bl	8000bfc <lcd_print_string>
	}

	//printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
	lcd_set_cursor(2, 1);
 800050a:	2101      	movs	r1, #1
 800050c:	2002      	movs	r0, #2
 800050e:	f000 fc55 	bl	8000dbc <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff ff75 	bl	8000404 <date_to_string>
 800051a:	4603      	mov	r3, r0
 800051c:	4618      	mov	r0, r3
 800051e:	f000 fb6d 	bl	8000bfc <lcd_print_string>


	while(1);
 8000522:	e7fe      	b.n	8000522 <main+0xca>
 8000524:	080029b0 	.word	0x080029b0
 8000528:	080029bc 	.word	0x080029bc
 800052c:	080029c8 	.word	0x080029c8
 8000530:	080029dc 	.word	0x080029dc
 8000534:	080029e0 	.word	0x080029e0

08000538 <SysTick_Handler>:
	return 0;
}


void SysTick_Handler(void)
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	ds1307_get_current_time(&current_time);
 800053e:	f107 0308 	add.w	r3, r7, #8
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f9c5 	bl	80008d2 <ds1307_get_current_time>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 8000548:	7afb      	ldrb	r3, [r7, #11]
 800054a:	2b02      	cmp	r3, #2
 800054c:	d012      	beq.n	8000574 <SysTick_Handler+0x3c>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 800054e:	7afb      	ldrb	r3, [r7, #11]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SysTick_Handler+0x20>
 8000554:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <SysTick_Handler+0x80>)
 8000556:	e000      	b.n	800055a <SysTick_Handler+0x22>
 8000558:	4b18      	ldr	r3, [pc, #96]	; (80005bc <SysTick_Handler+0x84>)
 800055a:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
 800055c:	f107 0308 	add.w	r3, r7, #8
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ff25 	bl	80003b0 <time_to_string>
 8000566:	4603      	mov	r3, r0
 8000568:	68fa      	ldr	r2, [r7, #12]
 800056a:	4619      	mov	r1, r3
 800056c:	4814      	ldr	r0, [pc, #80]	; (80005c0 <SysTick_Handler+0x88>)
 800056e:	f001 fa9b 	bl	8001aa8 <iprintf>
 8000572:	e009      	b.n	8000588 <SysTick_Handler+0x50>
		lcd_print_string(am_pm);
#endif

	}else{
#ifndef PRINT_LCD
		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff ff19 	bl	80003b0 <time_to_string>
 800057e:	4603      	mov	r3, r0
 8000580:	4619      	mov	r1, r3
 8000582:	4810      	ldr	r0, [pc, #64]	; (80005c4 <SysTick_Handler+0x8c>)
 8000584:	f001 fa90 	bl	8001aa8 <iprintf>
		lcd_set_cursor(1, 1);
		lcd_print_string(time_to_string(&current_time));
#endif
	}

	ds1307_get_current_date(&current_date);
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f9ea 	bl	8000964 <ds1307_get_current_date>

#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff ff36 	bl	8000404 <date_to_string>
 8000598:	4604      	mov	r4, r0
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff fead 	bl	80002fc <get_day_of_week>
 80005a2:	4603      	mov	r3, r0
 80005a4:	461a      	mov	r2, r3
 80005a6:	4621      	mov	r1, r4
 80005a8:	4807      	ldr	r0, [pc, #28]	; (80005c8 <SysTick_Handler+0x90>)
 80005aa:	f001 fa7d 	bl	8001aa8 <iprintf>
	lcd_print_string(get_day_of_week(current_date.day));
	lcd_print_char('>');
#endif


}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd90      	pop	{r4, r7, pc}
 80005b6:	bf00      	nop
 80005b8:	080029dc 	.word	0x080029dc
 80005bc:	080029e0 	.word	0x080029e0
 80005c0:	080029e4 	.word	0x080029e4
 80005c4:	080029fc 	.word	0x080029fc
 80005c8:	08002a10 	.word	0x08002a10

080005cc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <ITM_SendChar+0x48>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <ITM_SendChar+0x48>)
 80005dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005e0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80005e2:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <ITM_SendChar+0x4c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a0c      	ldr	r2, [pc, #48]	; (8000618 <ITM_SendChar+0x4c>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80005ee:	bf00      	nop
 80005f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d0f8      	beq.n	80005f0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80005fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	6013      	str	r3, [r2, #0]
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000edfc 	.word	0xe000edfc
 8000618:	e0000e00 	.word	0xe0000e00

0800061c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	e00a      	b.n	8000644 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800062e:	f3af 8000 	nop.w
 8000632:	4601      	mov	r1, r0
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	1c5a      	adds	r2, r3, #1
 8000638:	60ba      	str	r2, [r7, #8]
 800063a:	b2ca      	uxtb	r2, r1
 800063c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	3301      	adds	r3, #1
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	697a      	ldr	r2, [r7, #20]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	429a      	cmp	r2, r3
 800064a:	dbf0      	blt.n	800062e <_read+0x12>
	}

return len;
 800064c:	687b      	ldr	r3, [r7, #4]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3718      	adds	r7, #24
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b086      	sub	sp, #24
 800065a:	af00      	add	r7, sp, #0
 800065c:	60f8      	str	r0, [r7, #12]
 800065e:	60b9      	str	r1, [r7, #8]
 8000660:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
 8000666:	e009      	b.n	800067c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	60ba      	str	r2, [r7, #8]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ffab 	bl	80005cc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	3301      	adds	r3, #1
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	697a      	ldr	r2, [r7, #20]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	429a      	cmp	r2, r3
 8000682:	dbf1      	blt.n	8000668 <_write+0x12>
	}
	return len;
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	3718      	adds	r7, #24
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <_close>:

int _close(int file)
{
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
	return -1;
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
}
 800069a:	4618      	mov	r0, r3
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006a6:	b480      	push	{r7}
 80006a8:	b083      	sub	sp, #12
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
 80006ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006b6:	605a      	str	r2, [r3, #4]
	return 0;
 80006b8:	2300      	movs	r3, #0
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <_isatty>:

int _isatty(int file)
{
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
	return 1;
 80006ce:	2301      	movs	r3, #1
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
	return 0;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
	...

080006f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <_sbrk+0x50>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d102      	bne.n	800070e <_sbrk+0x16>
		heap_end = &end;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <_sbrk+0x50>)
 800070a:	4a10      	ldr	r2, [pc, #64]	; (800074c <_sbrk+0x54>)
 800070c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <_sbrk+0x50>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <_sbrk+0x50>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4413      	add	r3, r2
 800071c:	466a      	mov	r2, sp
 800071e:	4293      	cmp	r3, r2
 8000720:	d907      	bls.n	8000732 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000722:	f001 f98f 	bl	8001a44 <__errno>
 8000726:	4602      	mov	r2, r0
 8000728:	230c      	movs	r3, #12
 800072a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800072c:	f04f 33ff 	mov.w	r3, #4294967295
 8000730:	e006      	b.n	8000740 <_sbrk+0x48>
	}

	heap_end += incr;
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <_sbrk+0x50>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4413      	add	r3, r2
 800073a:	4a03      	ldr	r2, [pc, #12]	; (8000748 <_sbrk+0x50>)
 800073c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800073e:	68fb      	ldr	r3, [r7, #12]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200000ac 	.word	0x200000ac
 800074c:	200000e8 	.word	0x200000e8

08000750 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000752:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <LoopForever+0x6>)
  ldr r1, =_edata
 8000756:	490e      	ldr	r1, [pc, #56]	; (8000790 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <LoopForever+0xe>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800075c:	e002      	b.n	8000764 <LoopCopyDataInit>

0800075e <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 800075e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000762:	3304      	adds	r3, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000766:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000768:	d3f9      	bcc.n	800075e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076a:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <LoopForever+0x12>)
  ldr r4, =_ebss
 800076c:	4c0b      	ldr	r4, [pc, #44]	; (800079c <LoopForever+0x16>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000770:	e001      	b.n	8000776 <LoopFillZerobss>

08000772 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000774:	3204      	adds	r2, #4

08000776 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000778:	d3fb      	bcc.n	8000772 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800077a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800077e:	f001 f967 	bl	8001a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000782:	f7ff fe69 	bl	8000458 <main>

08000786 <LoopForever>:

LoopForever:
    b LoopForever
 8000786:	e7fe      	b.n	8000786 <LoopForever>
  ldr   r0, =_estack
 8000788:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800078c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000790:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000794:	08002ac8 	.word	0x08002ac8
  ldr r2, =_sbss
 8000798:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800079c:	200000e4 	.word	0x200000e4

080007a0 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a0:	e7fe      	b.n	80007a0 <ADC_IRQHandler>
	...

080007a4 <ds1307_init>:

//returns 1 : CH = 1 ; init failed
//returns 0 : CH = 0 ; init success

uint8_t ds1307_init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
	//1. init the i2c pins
	 ds1307_i2c_pin_config();
 80007aa:	f000 f90f 	bl	80009cc <ds1307_i2c_pin_config>

	//2. initialize the i2c peripheral
	ds1307_i2c_config();
 80007ae:	f000 f949 	bl	8000a44 <ds1307_i2c_config>

	//3. Enable the I2C peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 80007b2:	2101      	movs	r1, #1
 80007b4:	4809      	ldr	r0, [pc, #36]	; (80007dc <ds1307_init+0x38>)
 80007b6:	f000 fe99 	bl	80014ec <I2C_PeripheralControl>


	//4. Make clock halt = 0;
	ds1307_write(0x00,DS1307_ADDR_SEC);
 80007ba:	2100      	movs	r1, #0
 80007bc:	2000      	movs	r0, #0
 80007be:	f000 f957 	bl	8000a70 <ds1307_write>

	//5. Read back clock halt bit
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 80007c2:	2000      	movs	r0, #0
 80007c4:	f000 f970 	bl	8000aa8 <ds1307_read>
 80007c8:	4603      	mov	r3, r0
 80007ca:	71fb      	strb	r3, [r7, #7]

	return ((clock_state >> 7 ) & 0x1);
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	09db      	lsrs	r3, r3, #7
 80007d0:	b2db      	uxtb	r3, r3

}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40005400 	.word	0x40005400

080007e0 <ds1307_set_current_time>:


void ds1307_set_current_time(RTC_time_t *rtc_time)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 f979 	bl	8000ae4 <binary_to_bcd>
 80007f2:	4603      	mov	r3, r0
 80007f4:	73bb      	strb	r3, [r7, #14]
	seconds &= ~( 1 << 7);
 80007f6:	7bbb      	ldrb	r3, [r7, #14]
 80007f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007fc:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 80007fe:	7bbb      	ldrb	r3, [r7, #14]
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f934 	bl	8000a70 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	785b      	ldrb	r3, [r3, #1]
 800080c:	4618      	mov	r0, r3
 800080e:	f000 f969 	bl	8000ae4 <binary_to_bcd>
 8000812:	4603      	mov	r3, r0
 8000814:	2101      	movs	r1, #1
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f92a 	bl	8000a70 <ds1307_write>

	hrs = binary_to_bcd(rtc_time->hours);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	789b      	ldrb	r3, [r3, #2]
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f95f 	bl	8000ae4 <binary_to_bcd>
 8000826:	4603      	mov	r3, r0
 8000828:	73fb      	strb	r3, [r7, #15]

	if(rtc_time->time_format == TIME_FORMAT_24HRS){
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	78db      	ldrb	r3, [r3, #3]
 800082e:	2b02      	cmp	r3, #2
 8000830:	d104      	bne.n	800083c <ds1307_set_current_time+0x5c>
		hrs &= ~(1 << 6);
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000838:	73fb      	strb	r3, [r7, #15]
 800083a:	e011      	b.n	8000860 <ds1307_set_current_time+0x80>
	}else{
		hrs |= (1 << 6);
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000842:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time->time_format  == TIME_FORMAT_12HRS_PM) ? hrs | ( 1 << 5) :  hrs & ~( 1 << 5) ;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	78db      	ldrb	r3, [r3, #3]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d104      	bne.n	8000856 <ds1307_set_current_time+0x76>
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	f043 0320 	orr.w	r3, r3, #32
 8000852:	b2db      	uxtb	r3, r3
 8000854:	e003      	b.n	800085e <ds1307_set_current_time+0x7e>
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	f023 0320 	bic.w	r3, r3, #32
 800085c:	b2db      	uxtb	r3, r3
 800085e:	73fb      	strb	r3, [r7, #15]
	}

	ds1307_write(hrs,DS1307_ADDR_HRS);
 8000860:	7bfb      	ldrb	r3, [r7, #15]
 8000862:	2102      	movs	r1, #2
 8000864:	4618      	mov	r0, r3
 8000866:	f000 f903 	bl	8000a70 <ds1307_write>

}
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <ds1307_set_current_date>:


void ds1307_set_current_date(RTC_date_t *rtc_date)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(rtc_date->date),DS1307_ADDR_DATE);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f930 	bl	8000ae4 <binary_to_bcd>
 8000884:	4603      	mov	r3, r0
 8000886:	2104      	movs	r1, #4
 8000888:	4618      	mov	r0, r3
 800088a:	f000 f8f1 	bl	8000a70 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->month),DS1307_ADDR_MONTH);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	785b      	ldrb	r3, [r3, #1]
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f926 	bl	8000ae4 <binary_to_bcd>
 8000898:	4603      	mov	r3, r0
 800089a:	2105      	movs	r1, #5
 800089c:	4618      	mov	r0, r3
 800089e:	f000 f8e7 	bl	8000a70 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->year),DS1307_ADDR_YEAR);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	789b      	ldrb	r3, [r3, #2]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f91c 	bl	8000ae4 <binary_to_bcd>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2106      	movs	r1, #6
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 f8dd 	bl	8000a70 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->day),DS1307_ADDR_DAY);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	78db      	ldrb	r3, [r3, #3]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f912 	bl	8000ae4 <binary_to_bcd>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2103      	movs	r1, #3
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 f8d3 	bl	8000a70 <ds1307_write>

}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <ds1307_get_current_time>:


void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b084      	sub	sp, #16
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]

	uint8_t seconds,hrs;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 80008da:	2000      	movs	r0, #0
 80008dc:	f000 f8e4 	bl	8000aa8 <ds1307_read>
 80008e0:	4603      	mov	r3, r0
 80008e2:	73bb      	strb	r3, [r7, #14]

	seconds &= ~( 1 << 7);
 80008e4:	7bbb      	ldrb	r3, [r7, #14]
 80008e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008ea:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 80008ec:	7bbb      	ldrb	r3, [r7, #14]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f924 	bl	8000b3c <bcd_to_binary>
 80008f4:	4603      	mov	r3, r0
 80008f6:	461a      	mov	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 80008fc:	2001      	movs	r0, #1
 80008fe:	f000 f8d3 	bl	8000aa8 <ds1307_read>
 8000902:	4603      	mov	r3, r0
 8000904:	4618      	mov	r0, r3
 8000906:	f000 f919 	bl	8000b3c <bcd_to_binary>
 800090a:	4603      	mov	r3, r0
 800090c:	461a      	mov	r2, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 8000912:	2002      	movs	r0, #2
 8000914:	f000 f8c8 	bl	8000aa8 <ds1307_read>
 8000918:	4603      	mov	r3, r0
 800091a:	73fb      	strb	r3, [r7, #15]
	if(hrs & ( 1 << 6)){
 800091c:	7bfb      	ldrb	r3, [r7, #15]
 800091e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000922:	2b00      	cmp	r3, #0
 8000924:	d00f      	beq.n	8000946 <ds1307_get_current_time+0x74>
		//12 hr format
		rtc_time->time_format =  !((hrs & ( 1 << 5)) == 0) ;
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	f003 0320 	and.w	r3, r3, #32
 800092c:	2b00      	cmp	r3, #0
 800092e:	bf14      	ite	ne
 8000930:	2301      	movne	r3, #1
 8000932:	2300      	moveq	r3, #0
 8000934:	b2db      	uxtb	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5);//Clear 6 and 5
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000942:	73fb      	strb	r3, [r7, #15]
 8000944:	e002      	b.n	800094c <ds1307_get_current_time+0x7a>
	}else{
		//24 hr format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2202      	movs	r2, #2
 800094a:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	4618      	mov	r0, r3
 8000950:	f000 f8f4 	bl	8000b3c <bcd_to_binary>
 8000954:	4603      	mov	r3, r0
 8000956:	461a      	mov	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	709a      	strb	r2, [r3, #2]
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <ds1307_get_current_date>:


void ds1307_get_current_date(RTC_date_t *rtc_date)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	rtc_date->day =  bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 800096c:	2003      	movs	r0, #3
 800096e:	f000 f89b 	bl	8000aa8 <ds1307_read>
 8000972:	4603      	mov	r3, r0
 8000974:	4618      	mov	r0, r3
 8000976:	f000 f8e1 	bl	8000b3c <bcd_to_binary>
 800097a:	4603      	mov	r3, r0
 800097c:	461a      	mov	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	70da      	strb	r2, [r3, #3]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 8000982:	2004      	movs	r0, #4
 8000984:	f000 f890 	bl	8000aa8 <ds1307_read>
 8000988:	4603      	mov	r3, r0
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f8d6 	bl	8000b3c <bcd_to_binary>
 8000990:	4603      	mov	r3, r0
 8000992:	461a      	mov	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	701a      	strb	r2, [r3, #0]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 8000998:	2005      	movs	r0, #5
 800099a:	f000 f885 	bl	8000aa8 <ds1307_read>
 800099e:	4603      	mov	r3, r0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 f8cb 	bl	8000b3c <bcd_to_binary>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 80009ae:	2006      	movs	r0, #6
 80009b0:	f000 f87a 	bl	8000aa8 <ds1307_read>
 80009b4:	4603      	mov	r3, r0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f8c0 	bl	8000b3c <bcd_to_binary>
 80009bc:	4603      	mov	r3, r0
 80009be:	461a      	mov	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	709a      	strb	r2, [r3, #2]

}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <ds1307_i2c_pin_config>:

static void ds1307_i2c_pin_config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda,i2c_scl;

	memset(&i2c_sda,0,sizeof(i2c_sda));
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	220c      	movs	r2, #12
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 f85c 	bl	8001a98 <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 80009e0:	463b      	mov	r3, r7
 80009e2:	220c      	movs	r2, #12
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f001 f856 	bl	8001a98 <memset>
	/*
	 * I2C1_SCL ==> PB6
	 * I2C1_SDA ==> PB9
	 */

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <ds1307_i2c_pin_config+0x74>)
 80009ee:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80009f0:	2304      	movs	r3, #4
 80009f2:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80009f4:	2302      	movs	r3, #2
 80009f6:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 80009f8:	2309      	movs	r3, #9
 80009fa:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80009fc:	2301      	movs	r3, #1
 80009fe:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000a00:	2301      	movs	r3, #1
 8000a02:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a04:	2302      	movs	r3, #2
 8000a06:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 fb27 	bl	8001060 <GPIO_Init>


	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <ds1307_i2c_pin_config+0x74>)
 8000a14:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000a16:	2304      	movs	r3, #4
 8000a18:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 8000a1e:	2306      	movs	r3, #6
 8000a20:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000a22:	2301      	movs	r3, #1
 8000a24:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000a26:	2301      	movs	r3, #1
 8000a28:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&i2c_scl);
 8000a2e:	463b      	mov	r3, r7
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 fb15 	bl	8001060 <GPIO_Init>

}
 8000a36:	bf00      	nop
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40020400 	.word	0x40020400

08000a44 <ds1307_i2c_config>:

static void ds1307_i2c_config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <ds1307_i2c_config+0x20>)
 8000a4a:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <ds1307_i2c_config+0x24>)
 8000a4c:	601a      	str	r2, [r3, #0]
	g_ds1307I2cHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000a4e:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <ds1307_i2c_config+0x20>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	725a      	strb	r2, [r3, #9]
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <ds1307_i2c_config+0x20>)
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <ds1307_i2c_config+0x28>)
 8000a58:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2cHandle);
 8000a5a:	4802      	ldr	r0, [pc, #8]	; (8000a64 <ds1307_i2c_config+0x20>)
 8000a5c:	f000 fdba 	bl	80015d4 <I2C_Init>
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200000b8 	.word	0x200000b8
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	000186a0 	.word	0x000186a0

08000a70 <ds1307_write>:


static void ds1307_write(uint8_t value,uint8_t reg_addr)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	4603      	mov	r3, r0
 8000a78:	460a      	mov	r2, r1
 8000a7a:	71fb      	strb	r3, [r7, #7]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 8000a80:	79bb      	ldrb	r3, [r7, #6]
 8000a82:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 8000a88:	f107 010c 	add.w	r1, r7, #12
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2368      	movs	r3, #104	; 0x68
 8000a92:	2202      	movs	r2, #2
 8000a94:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <ds1307_write+0x34>)
 8000a96:	f000 fe63 	bl	8001760 <I2C_MasterSendData>
}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200000b8 	.word	0x200000b8

08000aa8 <ds1307_read>:

static uint8_t ds1307_read(uint8_t reg_addr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af02      	add	r7, sp, #8
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
    I2C_MasterSendData(&g_ds1307I2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 8000ab2:	1df9      	adds	r1, r7, #7
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	2368      	movs	r3, #104	; 0x68
 8000aba:	2201      	movs	r2, #1
 8000abc:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <ds1307_read+0x38>)
 8000abe:	f000 fe4f 	bl	8001760 <I2C_MasterSendData>
    I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 8000ac2:	f107 010f 	add.w	r1, r7, #15
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2368      	movs	r3, #104	; 0x68
 8000acc:	2201      	movs	r2, #1
 8000ace:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <ds1307_read+0x38>)
 8000ad0:	f000 fea9 	bl	8001826 <I2C_MasterReceiveData>

    return data;
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200000b8 	.word	0x200000b8

08000ae4 <binary_to_bcd>:


static uint8_t binary_to_bcd(uint8_t value)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	uint8_t bcd;

	bcd = value;
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b09      	cmp	r3, #9
 8000af6:	d918      	bls.n	8000b2a <binary_to_bcd+0x46>
	{
		m = value /10;
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	4a0f      	ldr	r2, [pc, #60]	; (8000b38 <binary_to_bcd+0x54>)
 8000afc:	fba2 2303 	umull	r2, r3, r2, r3
 8000b00:	08db      	lsrs	r3, r3, #3
 8000b02:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 8000b04:	79fa      	ldrb	r2, [r7, #7]
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <binary_to_bcd+0x54>)
 8000b08:	fba3 1302 	umull	r1, r3, r3, r2
 8000b0c:	08d9      	lsrs	r1, r3, #3
 8000b0e:	460b      	mov	r3, r1
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	440b      	add	r3, r1
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	737b      	strb	r3, [r7, #13]
		bcd = (m << 4) | n ;
 8000b1a:	7bbb      	ldrb	r3, [r7, #14]
 8000b1c:	011b      	lsls	r3, r3, #4
 8000b1e:	b25a      	sxtb	r2, r3
 8000b20:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	b25b      	sxtb	r3, r3
 8000b28:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	cccccccd 	.word	0xcccccccd

08000b3c <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t value)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	m = (uint8_t) ((value >> 4 ) * 10);
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	091b      	lsrs	r3, r3, #4
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	0092      	lsls	r2, r2, #2
 8000b50:	4413      	add	r3, r2
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	73fb      	strb	r3, [r7, #15]
	n =  value & (uint8_t)0x0F;
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	f003 030f 	and.w	r3, r3, #15
 8000b5c:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 8000b5e:	7bfa      	ldrb	r2, [r7, #15]
 8000b60:	7bbb      	ldrb	r3, [r7, #14]
 8000b62:	4413      	add	r3, r2
 8000b64:	b2db      	uxtb	r3, r3
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <lcd_send_command>:
static void lcd_enable(void);
static void mdelay(uint32_t cnt);
static void udelay(uint32_t cnt);

void lcd_send_command(uint8_t cmd)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
	/* RS=0 for LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <lcd_send_command+0x40>)
 8000b84:	f000 fc0a 	bl	800139c <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	4809      	ldr	r0, [pc, #36]	; (8000bb4 <lcd_send_command+0x40>)
 8000b8e:	f000 fc05 	bl	800139c <GPIO_WriteToOutputPin>

	write_4_bits(cmd >> 4);
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	091b      	lsrs	r3, r3, #4
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f8cd 	bl	8000d38 <write_4_bits>
	write_4_bits(cmd & 0x0F);
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	f003 030f 	and.w	r3, r3, #15
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f8c6 	bl	8000d38 <write_4_bits>

}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40020c00 	.word	0x40020c00

08000bb8 <lcd_print_char>:
 *Here we used 4 bit parallel data transmission.
 *First higher nibble of the data will be sent on to the data lines D4,D5,D6,D7
 *Then lower nibble of the data will be set on to the data lines D4,D5,D6,D7
 */
void lcd_print_char(uint8_t data)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
	/* RS=1 for LCD user data */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <lcd_print_char+0x40>)
 8000bc8:	f000 fbe8 	bl	800139c <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2101      	movs	r1, #1
 8000bd0:	4809      	ldr	r0, [pc, #36]	; (8000bf8 <lcd_print_char+0x40>)
 8000bd2:	f000 fbe3 	bl	800139c <GPIO_WriteToOutputPin>

	write_4_bits(data >> 4);  /*Higher nibble*/
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	091b      	lsrs	r3, r3, #4
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 f8ab 	bl	8000d38 <write_4_bits>
	write_4_bits(data & 0x0F); /*Lower nibble*/
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 030f 	and.w	r3, r3, #15
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f8a4 	bl	8000d38 <write_4_bits>

}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40020c00 	.word	0x40020c00

08000bfc <lcd_print_string>:


void lcd_print_string(char *message)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

      do
      {
          lcd_print_char((uint8_t)*message++);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	1c5a      	adds	r2, r3, #1
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ffd3 	bl	8000bb8 <lcd_print_char>
      }
      while (*message != '\0');
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d1f4      	bne.n	8000c04 <lcd_print_string+0x8>

}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <lcd_init>:


void lcd_init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0

	//1. Configure the gpio pins which are used for lcd connections

	GPIO_Handle_t lcd_signal;

	lcd_signal.pGPIOx = LCD_GPIO_PORT;
 8000c2a:	4b42      	ldr	r3, [pc, #264]	; (8000d34 <lcd_init+0x110>)
 8000c2c:	607b      	str	r3, [r7, #4]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 8000c32:	2300      	movs	r3, #0
 8000c34:	723b      	strb	r3, [r7, #8]
	lcd_signal.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000c36:	2300      	movs	r3, #0
 8000c38:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&lcd_signal);
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 fa0b 	bl	8001060 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 fa05 	bl	8001060 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 8000c56:	2302      	movs	r3, #2
 8000c58:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 f9ff 	bl	8001060 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 8000c62:	2303      	movs	r3, #3
 8000c64:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 f9f9 	bl	8001060 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 f9f3 	bl	8001060 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 8000c7a:	2305      	movs	r3, #5
 8000c7c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 f9ed 	bl	8001060 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 8000c86:	2306      	movs	r3, #6
 8000c88:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 f9e7 	bl	8001060 <GPIO_Init>

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	4827      	ldr	r0, [pc, #156]	; (8000d34 <lcd_init+0x110>)
 8000c98:	f000 fb80 	bl	800139c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	4824      	ldr	r0, [pc, #144]	; (8000d34 <lcd_init+0x110>)
 8000ca2:	f000 fb7b 	bl	800139c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2102      	movs	r1, #2
 8000caa:	4822      	ldr	r0, [pc, #136]	; (8000d34 <lcd_init+0x110>)
 8000cac:	f000 fb76 	bl	800139c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2103      	movs	r1, #3
 8000cb4:	481f      	ldr	r0, [pc, #124]	; (8000d34 <lcd_init+0x110>)
 8000cb6:	f000 fb71 	bl	800139c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2104      	movs	r1, #4
 8000cbe:	481d      	ldr	r0, [pc, #116]	; (8000d34 <lcd_init+0x110>)
 8000cc0:	f000 fb6c 	bl	800139c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2105      	movs	r1, #5
 8000cc8:	481a      	ldr	r0, [pc, #104]	; (8000d34 <lcd_init+0x110>)
 8000cca:	f000 fb67 	bl	800139c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2106      	movs	r1, #6
 8000cd2:	4818      	ldr	r0, [pc, #96]	; (8000d34 <lcd_init+0x110>)
 8000cd4:	f000 fb62 	bl	800139c <GPIO_WriteToOutputPin>

	//2. Do the LCD initialization

	mdelay(40);
 8000cd8:	2028      	movs	r0, #40	; 0x28
 8000cda:	f000 f8ad 	bl	8000e38 <mdelay>

	/*RS = 0 , For LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4814      	ldr	r0, [pc, #80]	; (8000d34 <lcd_init+0x110>)
 8000ce4:	f000 fb5a 	bl	800139c <GPIO_WriteToOutputPin>

	/* RnW = 0, Writing to LCD */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2101      	movs	r1, #1
 8000cec:	4811      	ldr	r0, [pc, #68]	; (8000d34 <lcd_init+0x110>)
 8000cee:	f000 fb55 	bl	800139c <GPIO_WriteToOutputPin>

	write_4_bits(0x3);
 8000cf2:	2003      	movs	r0, #3
 8000cf4:	f000 f820 	bl	8000d38 <write_4_bits>

	mdelay(50);
 8000cf8:	2032      	movs	r0, #50	; 0x32
 8000cfa:	f000 f89d 	bl	8000e38 <mdelay>

	write_4_bits(0x3);
 8000cfe:	2003      	movs	r0, #3
 8000d00:	f000 f81a 	bl	8000d38 <write_4_bits>

	udelay(200);
 8000d04:	20c8      	movs	r0, #200	; 0xc8
 8000d06:	f000 f8af 	bl	8000e68 <udelay>

	write_4_bits(0x3);
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	f000 f814 	bl	8000d38 <write_4_bits>
	write_4_bits(0x2);
 8000d10:	2002      	movs	r0, #2
 8000d12:	f000 f811 	bl	8000d38 <write_4_bits>

	//function set command
	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 8000d16:	2028      	movs	r0, #40	; 0x28
 8000d18:	f7ff ff2c 	bl	8000b74 <lcd_send_command>

	//disply ON and cursor ON
	lcd_send_command(LCD_CMD_DON_CURON);
 8000d1c:	200e      	movs	r0, #14
 8000d1e:	f7ff ff29 	bl	8000b74 <lcd_send_command>

	lcd_display_clear();
 8000d22:	f000 f841 	bl	8000da8 <lcd_display_clear>

	//entry mode set
	lcd_send_command(LCD_CMD_INCADD);
 8000d26:	2006      	movs	r0, #6
 8000d28:	f7ff ff24 	bl	8000b74 <lcd_send_command>



}
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40020c00 	.word	0x40020c00

08000d38 <write_4_bits>:

/* writes 4 bits of data/command on to D4,D5,D6,D7 lines */
static void write_4_bits(uint8_t value)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D4, ((value >> 0) & 0x1) );
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	2103      	movs	r1, #3
 8000d4e:	4815      	ldr	r0, [pc, #84]	; (8000da4 <write_4_bits+0x6c>)
 8000d50:	f000 fb24 	bl	800139c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D5, ((value >> 1) & 0x1) );
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	085b      	lsrs	r3, r3, #1
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	461a      	mov	r2, r3
 8000d62:	2104      	movs	r1, #4
 8000d64:	480f      	ldr	r0, [pc, #60]	; (8000da4 <write_4_bits+0x6c>)
 8000d66:	f000 fb19 	bl	800139c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D6, ((value >> 2) & 0x1) );
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	089b      	lsrs	r3, r3, #2
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	461a      	mov	r2, r3
 8000d78:	2105      	movs	r1, #5
 8000d7a:	480a      	ldr	r0, [pc, #40]	; (8000da4 <write_4_bits+0x6c>)
 8000d7c:	f000 fb0e 	bl	800139c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D7, ((value >> 3) & 0x1) );
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	08db      	lsrs	r3, r3, #3
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	2106      	movs	r1, #6
 8000d90:	4804      	ldr	r0, [pc, #16]	; (8000da4 <write_4_bits+0x6c>)
 8000d92:	f000 fb03 	bl	800139c <GPIO_WriteToOutputPin>

	lcd_enable();
 8000d96:	f000 f839 	bl	8000e0c <lcd_enable>

}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40020c00 	.word	0x40020c00

08000da8 <lcd_display_clear>:

void lcd_display_clear(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	//Display clear
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 8000dac:	2001      	movs	r0, #1
 8000dae:	f7ff fee1 	bl	8000b74 <lcd_send_command>
	/*
	 * check page number 24 of datasheet.
	 * display clear command execution wait time is around 2ms
	 */

	mdelay(200);
 8000db2:	20c8      	movs	r0, #200	; 0xc8
 8000db4:	f000 f840 	bl	8000e38 <mdelay>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <lcd_set_cursor>:
  *   Set Lcd to a specified location given by row and column information
  *   Row Number (1 to 2)
  *   Column Number (1 to 16) Assuming a 2 X 16 characters display
  */
void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	460a      	mov	r2, r1
 8000dc6:	71fb      	strb	r3, [r7, #7]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	71bb      	strb	r3, [r7, #6]
  column--;
 8000dcc:	79bb      	ldrb	r3, [r7, #6]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	71bb      	strb	r3, [r7, #6]
  switch (row)
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d002      	beq.n	8000dde <lcd_set_cursor+0x22>
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d009      	beq.n	8000df0 <lcd_set_cursor+0x34>
    case 2:
      /* Set cursor to 2nd row address and add index*/
        lcd_send_command((column |= 0xC0));
      break;
    default:
      break;
 8000ddc:	e011      	b.n	8000e02 <lcd_set_cursor+0x46>
      lcd_send_command((column |= 0x80));
 8000dde:	79bb      	ldrb	r3, [r7, #6]
 8000de0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000de4:	71bb      	strb	r3, [r7, #6]
 8000de6:	79bb      	ldrb	r3, [r7, #6]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fec3 	bl	8000b74 <lcd_send_command>
      break;
 8000dee:	e008      	b.n	8000e02 <lcd_set_cursor+0x46>
        lcd_send_command((column |= 0xC0));
 8000df0:	79bb      	ldrb	r3, [r7, #6]
 8000df2:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000df6:	71bb      	strb	r3, [r7, #6]
 8000df8:	79bb      	ldrb	r3, [r7, #6]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff feba 	bl	8000b74 <lcd_send_command>
      break;
 8000e00:	bf00      	nop
  }
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <lcd_enable>:



static void lcd_enable(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	2102      	movs	r1, #2
 8000e14:	4807      	ldr	r0, [pc, #28]	; (8000e34 <lcd_enable+0x28>)
 8000e16:	f000 fac1 	bl	800139c <GPIO_WriteToOutputPin>
	udelay(50);
 8000e1a:	2032      	movs	r0, #50	; 0x32
 8000e1c:	f000 f824 	bl	8000e68 <udelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2102      	movs	r1, #2
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <lcd_enable+0x28>)
 8000e26:	f000 fab9 	bl	800139c <GPIO_WriteToOutputPin>
	udelay(100);/* execution time > 37 micro seconds */
 8000e2a:	2064      	movs	r0, #100	; 0x64
 8000e2c:	f000 f81c 	bl	8000e68 <udelay>
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40020c00 	.word	0x40020c00

08000e38 <mdelay>:


static void mdelay(uint32_t cnt)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	e002      	b.n	8000e4c <mdelay+0x14>
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e52:	fb02 f303 	mul.w	r3, r2, r3
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d3f4      	bcc.n	8000e46 <mdelay+0xe>
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <udelay>:

static void udelay(uint32_t cnt)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1); i++);
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	e002      	b.n	8000e7c <udelay+0x14>
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d3f8      	bcc.n	8000e76 <udelay+0xe>
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <GPIO_PeriClockControl>:
 * @Note              -  none

 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e9c:	78fb      	ldrb	r3, [r7, #3]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d162      	bne.n	8000f68 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a64      	ldr	r2, [pc, #400]	; (8001038 <GPIO_PeriClockControl+0x1a8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d106      	bne.n	8000eb8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000eaa:	4b64      	ldr	r3, [pc, #400]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a63      	ldr	r2, [pc, #396]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
				{
					GPIOI_PCLK_DI();
				}
	}

}
 8000eb6:	e0b9      	b.n	800102c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a61      	ldr	r2, [pc, #388]	; (8001040 <GPIO_PeriClockControl+0x1b0>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d106      	bne.n	8000ece <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000ec0:	4b5e      	ldr	r3, [pc, #376]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec4:	4a5d      	ldr	r2, [pc, #372]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000ec6:	f043 0302 	orr.w	r3, r3, #2
 8000eca:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ecc:	e0ae      	b.n	800102c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a5c      	ldr	r2, [pc, #368]	; (8001044 <GPIO_PeriClockControl+0x1b4>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d106      	bne.n	8000ee4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000ed6:	4b59      	ldr	r3, [pc, #356]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a58      	ldr	r2, [pc, #352]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ee2:	e0a3      	b.n	800102c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a58      	ldr	r2, [pc, #352]	; (8001048 <GPIO_PeriClockControl+0x1b8>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d106      	bne.n	8000efa <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000eec:	4b53      	ldr	r3, [pc, #332]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef0:	4a52      	ldr	r2, [pc, #328]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000ef2:	f043 0308 	orr.w	r3, r3, #8
 8000ef6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ef8:	e098      	b.n	800102c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a53      	ldr	r2, [pc, #332]	; (800104c <GPIO_PeriClockControl+0x1bc>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d106      	bne.n	8000f10 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000f02:	4b4e      	ldr	r3, [pc, #312]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a4d      	ldr	r2, [pc, #308]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000f08:	f043 0310 	orr.w	r3, r3, #16
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f0e:	e08d      	b.n	800102c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a4f      	ldr	r2, [pc, #316]	; (8001050 <GPIO_PeriClockControl+0x1c0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d106      	bne.n	8000f26 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000f18:	4b48      	ldr	r3, [pc, #288]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	4a47      	ldr	r2, [pc, #284]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000f1e:	f043 0320 	orr.w	r3, r3, #32
 8000f22:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f24:	e082      	b.n	800102c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4a      	ldr	r2, [pc, #296]	; (8001054 <GPIO_PeriClockControl+0x1c4>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d106      	bne.n	8000f3c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000f2e:	4b43      	ldr	r3, [pc, #268]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a42      	ldr	r2, [pc, #264]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f3a:	e077      	b.n	800102c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a46      	ldr	r2, [pc, #280]	; (8001058 <GPIO_PeriClockControl+0x1c8>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d106      	bne.n	8000f52 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000f44:	4b3d      	ldr	r3, [pc, #244]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f48:	4a3c      	ldr	r2, [pc, #240]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f50:	e06c      	b.n	800102c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a41      	ldr	r2, [pc, #260]	; (800105c <GPIO_PeriClockControl+0x1cc>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d168      	bne.n	800102c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000f5a:	4b38      	ldr	r3, [pc, #224]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a37      	ldr	r2, [pc, #220]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f66:	e061      	b.n	800102c <GPIO_PeriClockControl+0x19c>
				if(pGPIOx == GPIOA)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a33      	ldr	r2, [pc, #204]	; (8001038 <GPIO_PeriClockControl+0x1a8>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d106      	bne.n	8000f7e <GPIO_PeriClockControl+0xee>
					GPIOA_PCLK_DI();
 8000f70:	4b32      	ldr	r3, [pc, #200]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	4a31      	ldr	r2, [pc, #196]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000f76:	f023 0301 	bic.w	r3, r3, #1
 8000f7a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f7c:	e056      	b.n	800102c <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOB)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a2f      	ldr	r2, [pc, #188]	; (8001040 <GPIO_PeriClockControl+0x1b0>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d106      	bne.n	8000f94 <GPIO_PeriClockControl+0x104>
					GPIOB_PCLK_DI();
 8000f86:	4b2d      	ldr	r3, [pc, #180]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a2c      	ldr	r2, [pc, #176]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000f8c:	f023 0302 	bic.w	r3, r3, #2
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f92:	e04b      	b.n	800102c <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOC)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a2b      	ldr	r2, [pc, #172]	; (8001044 <GPIO_PeriClockControl+0x1b4>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d106      	bne.n	8000faa <GPIO_PeriClockControl+0x11a>
					GPIOC_PCLK_DI();
 8000f9c:	4b27      	ldr	r3, [pc, #156]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	4a26      	ldr	r2, [pc, #152]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000fa2:	f023 0304 	bic.w	r3, r3, #4
 8000fa6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fa8:	e040      	b.n	800102c <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOD)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a26      	ldr	r2, [pc, #152]	; (8001048 <GPIO_PeriClockControl+0x1b8>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d106      	bne.n	8000fc0 <GPIO_PeriClockControl+0x130>
					GPIOD_PCLK_DI();
 8000fb2:	4b22      	ldr	r3, [pc, #136]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a21      	ldr	r2, [pc, #132]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000fb8:	f023 0308 	bic.w	r3, r3, #8
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fbe:	e035      	b.n	800102c <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOE)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a22      	ldr	r2, [pc, #136]	; (800104c <GPIO_PeriClockControl+0x1bc>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d106      	bne.n	8000fd6 <GPIO_PeriClockControl+0x146>
					GPIOE_PCLK_DI();
 8000fc8:	4b1c      	ldr	r3, [pc, #112]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000fce:	f023 0310 	bic.w	r3, r3, #16
 8000fd2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fd4:	e02a      	b.n	800102c <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOF)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a1d      	ldr	r2, [pc, #116]	; (8001050 <GPIO_PeriClockControl+0x1c0>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d106      	bne.n	8000fec <GPIO_PeriClockControl+0x15c>
					GPIOF_PCLK_DI();
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a16      	ldr	r2, [pc, #88]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000fe4:	f023 0320 	bic.w	r3, r3, #32
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fea:	e01f      	b.n	800102c <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOG)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a19      	ldr	r2, [pc, #100]	; (8001054 <GPIO_PeriClockControl+0x1c4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d106      	bne.n	8001002 <GPIO_PeriClockControl+0x172>
					GPIOG_PCLK_DI();
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff8:	4a10      	ldr	r2, [pc, #64]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8000ffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ffe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001000:	e014      	b.n	800102c <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOH)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a14      	ldr	r2, [pc, #80]	; (8001058 <GPIO_PeriClockControl+0x1c8>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d106      	bne.n	8001018 <GPIO_PeriClockControl+0x188>
					GPIOH_PCLK_DI();
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8001010:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001016:	e009      	b.n	800102c <GPIO_PeriClockControl+0x19c>
				}else if (pGPIOx == GPIOI)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a10      	ldr	r2, [pc, #64]	; (800105c <GPIO_PeriClockControl+0x1cc>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d105      	bne.n	800102c <GPIO_PeriClockControl+0x19c>
					GPIOI_PCLK_DI();
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	4a05      	ldr	r2, [pc, #20]	; (800103c <GPIO_PeriClockControl+0x1ac>)
 8001026:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800102a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	40020000 	.word	0x40020000
 800103c:	40023800 	.word	0x40023800
 8001040:	40020400 	.word	0x40020400
 8001044:	40020800 	.word	0x40020800
 8001048:	40020c00 	.word	0x40020c00
 800104c:	40021000 	.word	0x40021000
 8001050:	40021400 	.word	0x40021400
 8001054:	40021800 	.word	0x40021800
 8001058:	40021c00 	.word	0x40021c00
 800105c:	40022000 	.word	0x40022000

08001060 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	//1.configure the mode of gpio pin

	uint32_t  temp = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]

	//enable the PerClockControl

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2101      	movs	r1, #1
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff0c 	bl	8000e90 <GPIO_PeriClockControl>

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	795b      	ldrb	r3, [r3, #5]
 800107c:	2b03      	cmp	r3, #3
 800107e:	d820      	bhi.n	80010c2 <GPIO_Init+0x62>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	795b      	ldrb	r3, [r3, #5]
 8001084:	461a      	mov	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	791b      	ldrb	r3, [r3, #4]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	791b      	ldrb	r3, [r3, #4]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2103      	movs	r1, #3
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	4619      	mov	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	400a      	ands	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6819      	ldr	r1, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	430a      	orrs	r2, r1
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	e0cb      	b.n	800125a <GPIO_Init+0x1fa>
	}else
	{
		//interrupt mode

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	795b      	ldrb	r3, [r3, #5]
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	d817      	bhi.n	80010fa <GPIO_Init+0x9a>
		{
			//1.configure the FTSR REG
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010ca:	4b4b      	ldr	r3, [pc, #300]	; (80011f8 <GPIO_Init+0x198>)
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	7912      	ldrb	r2, [r2, #4]
 80010d2:	4611      	mov	r1, r2
 80010d4:	2201      	movs	r2, #1
 80010d6:	408a      	lsls	r2, r1
 80010d8:	4611      	mov	r1, r2
 80010da:	4a47      	ldr	r2, [pc, #284]	; (80011f8 <GPIO_Init+0x198>)
 80010dc:	430b      	orrs	r3, r1
 80010de:	60d3      	str	r3, [r2, #12]
			//clear the correspoding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010e0:	4b45      	ldr	r3, [pc, #276]	; (80011f8 <GPIO_Init+0x198>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	7912      	ldrb	r2, [r2, #4]
 80010e8:	4611      	mov	r1, r2
 80010ea:	2201      	movs	r2, #1
 80010ec:	408a      	lsls	r2, r1
 80010ee:	43d2      	mvns	r2, r2
 80010f0:	4611      	mov	r1, r2
 80010f2:	4a41      	ldr	r2, [pc, #260]	; (80011f8 <GPIO_Init+0x198>)
 80010f4:	400b      	ands	r3, r1
 80010f6:	6093      	str	r3, [r2, #8]
 80010f8:	e035      	b.n	8001166 <GPIO_Init+0x106>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	795b      	ldrb	r3, [r3, #5]
 80010fe:	2b05      	cmp	r3, #5
 8001100:	d817      	bhi.n	8001132 <GPIO_Init+0xd2>
		{
			//1.configure the RTSR REG
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001102:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <GPIO_Init+0x198>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	7912      	ldrb	r2, [r2, #4]
 800110a:	4611      	mov	r1, r2
 800110c:	2201      	movs	r2, #1
 800110e:	408a      	lsls	r2, r1
 8001110:	4611      	mov	r1, r2
 8001112:	4a39      	ldr	r2, [pc, #228]	; (80011f8 <GPIO_Init+0x198>)
 8001114:	430b      	orrs	r3, r1
 8001116:	6093      	str	r3, [r2, #8]
			//clear the correspoding RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001118:	4b37      	ldr	r3, [pc, #220]	; (80011f8 <GPIO_Init+0x198>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	7912      	ldrb	r2, [r2, #4]
 8001120:	4611      	mov	r1, r2
 8001122:	2201      	movs	r2, #1
 8001124:	408a      	lsls	r2, r1
 8001126:	43d2      	mvns	r2, r2
 8001128:	4611      	mov	r1, r2
 800112a:	4a33      	ldr	r2, [pc, #204]	; (80011f8 <GPIO_Init+0x198>)
 800112c:	400b      	ands	r3, r1
 800112e:	60d3      	str	r3, [r2, #12]
 8001130:	e019      	b.n	8001166 <GPIO_Init+0x106>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	795b      	ldrb	r3, [r3, #5]
 8001136:	2b06      	cmp	r3, #6
 8001138:	d815      	bhi.n	8001166 <GPIO_Init+0x106>
		{
			//1.configure both the FTSR and RTSR REG
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800113a:	4b2f      	ldr	r3, [pc, #188]	; (80011f8 <GPIO_Init+0x198>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	7912      	ldrb	r2, [r2, #4]
 8001142:	4611      	mov	r1, r2
 8001144:	2201      	movs	r2, #1
 8001146:	408a      	lsls	r2, r1
 8001148:	4611      	mov	r1, r2
 800114a:	4a2b      	ldr	r2, [pc, #172]	; (80011f8 <GPIO_Init+0x198>)
 800114c:	430b      	orrs	r3, r1
 800114e:	6093      	str	r3, [r2, #8]
			//clear the correspoding  bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <GPIO_Init+0x198>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	7912      	ldrb	r2, [r2, #4]
 8001158:	4611      	mov	r1, r2
 800115a:	2201      	movs	r2, #1
 800115c:	408a      	lsls	r2, r1
 800115e:	4611      	mov	r1, r2
 8001160:	4a25      	ldr	r2, [pc, #148]	; (80011f8 <GPIO_Init+0x198>)
 8001162:	430b      	orrs	r3, r1
 8001164:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
				uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	791b      	ldrb	r3, [r3, #4]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	74fb      	strb	r3, [r7, #19]
				uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	791b      	ldrb	r3, [r3, #4]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	74bb      	strb	r3, [r7, #18]
				uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a1f      	ldr	r2, [pc, #124]	; (80011fc <GPIO_Init+0x19c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d04e      	beq.n	8001220 <GPIO_Init+0x1c0>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a1e      	ldr	r2, [pc, #120]	; (8001200 <GPIO_Init+0x1a0>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d032      	beq.n	80011f2 <GPIO_Init+0x192>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a1c      	ldr	r2, [pc, #112]	; (8001204 <GPIO_Init+0x1a4>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d02b      	beq.n	80011ee <GPIO_Init+0x18e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a1b      	ldr	r2, [pc, #108]	; (8001208 <GPIO_Init+0x1a8>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d024      	beq.n	80011ea <GPIO_Init+0x18a>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a19      	ldr	r2, [pc, #100]	; (800120c <GPIO_Init+0x1ac>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d01d      	beq.n	80011e6 <GPIO_Init+0x186>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a18      	ldr	r2, [pc, #96]	; (8001210 <GPIO_Init+0x1b0>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d016      	beq.n	80011e2 <GPIO_Init+0x182>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a16      	ldr	r2, [pc, #88]	; (8001214 <GPIO_Init+0x1b4>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d00f      	beq.n	80011de <GPIO_Init+0x17e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a15      	ldr	r2, [pc, #84]	; (8001218 <GPIO_Init+0x1b8>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d008      	beq.n	80011da <GPIO_Init+0x17a>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a13      	ldr	r2, [pc, #76]	; (800121c <GPIO_Init+0x1bc>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d101      	bne.n	80011d6 <GPIO_Init+0x176>
 80011d2:	2308      	movs	r3, #8
 80011d4:	e025      	b.n	8001222 <GPIO_Init+0x1c2>
 80011d6:	2300      	movs	r3, #0
 80011d8:	e023      	b.n	8001222 <GPIO_Init+0x1c2>
 80011da:	2307      	movs	r3, #7
 80011dc:	e021      	b.n	8001222 <GPIO_Init+0x1c2>
 80011de:	2306      	movs	r3, #6
 80011e0:	e01f      	b.n	8001222 <GPIO_Init+0x1c2>
 80011e2:	2305      	movs	r3, #5
 80011e4:	e01d      	b.n	8001222 <GPIO_Init+0x1c2>
 80011e6:	2304      	movs	r3, #4
 80011e8:	e01b      	b.n	8001222 <GPIO_Init+0x1c2>
 80011ea:	2303      	movs	r3, #3
 80011ec:	e019      	b.n	8001222 <GPIO_Init+0x1c2>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e017      	b.n	8001222 <GPIO_Init+0x1c2>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e015      	b.n	8001222 <GPIO_Init+0x1c2>
 80011f6:	bf00      	nop
 80011f8:	40013c00 	.word	0x40013c00
 80011fc:	40020000 	.word	0x40020000
 8001200:	40020400 	.word	0x40020400
 8001204:	40020800 	.word	0x40020800
 8001208:	40020c00 	.word	0x40020c00
 800120c:	40021000 	.word	0x40021000
 8001210:	40021400 	.word	0x40021400
 8001214:	40021800 	.word	0x40021800
 8001218:	40021c00 	.word	0x40021c00
 800121c:	40022000 	.word	0x40022000
 8001220:	2300      	movs	r3, #0
 8001222:	747b      	strb	r3, [r7, #17]
				SYSCFG_PCLK_EN();
 8001224:	4b5a      	ldr	r3, [pc, #360]	; (8001390 <GPIO_Init+0x330>)
 8001226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001228:	4a59      	ldr	r2, [pc, #356]	; (8001390 <GPIO_Init+0x330>)
 800122a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122e:	6453      	str	r3, [r2, #68]	; 0x44
				SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8001230:	7c7a      	ldrb	r2, [r7, #17]
 8001232:	7cbb      	ldrb	r3, [r7, #18]
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	fa02 f103 	lsl.w	r1, r2, r3
 800123a:	4a56      	ldr	r2, [pc, #344]	; (8001394 <GPIO_Init+0x334>)
 800123c:	7cfb      	ldrb	r3, [r7, #19]
 800123e:	3302      	adds	r3, #2
 8001240:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3.enable the exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001244:	4b54      	ldr	r3, [pc, #336]	; (8001398 <GPIO_Init+0x338>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	7912      	ldrb	r2, [r2, #4]
 800124c:	4611      	mov	r1, r2
 800124e:	2201      	movs	r2, #1
 8001250:	408a      	lsls	r2, r1
 8001252:	4611      	mov	r1, r2
 8001254:	4a50      	ldr	r2, [pc, #320]	; (8001398 <GPIO_Init+0x338>)
 8001256:	430b      	orrs	r3, r1
 8001258:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]

	//2.configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	799b      	ldrb	r3, [r3, #6]
 8001262:	461a      	mov	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	791b      	ldrb	r3, [r3, #4]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	791b      	ldrb	r3, [r3, #4]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	2103      	movs	r1, #3
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	4619      	mov	r1, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	400a      	ands	r2, r1
 800128c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6899      	ldr	r1, [r3, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	430a      	orrs	r2, r1
 800129c:	609a      	str	r2, [r3, #8]
	temp |= 0;

	//3. configure the pupd settings
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	79db      	ldrb	r3, [r3, #7]
 80012a2:	461a      	mov	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	791b      	ldrb	r3, [r3, #4]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	791b      	ldrb	r3, [r3, #4]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	2103      	movs	r1, #3
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	4619      	mov	r1, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	400a      	ands	r2, r1
 80012cc:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68d9      	ldr	r1, [r3, #12]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	430a      	orrs	r2, r1
 80012dc:	60da      	str	r2, [r3, #12]


		//4. configure the optype
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	7a1b      	ldrb	r3, [r3, #8]
 80012e2:	461a      	mov	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	791b      	ldrb	r3, [r3, #4]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	791b      	ldrb	r3, [r3, #4]
 80012f8:	4619      	mov	r1, r3
 80012fa:	2301      	movs	r3, #1
 80012fc:	408b      	lsls	r3, r1
 80012fe:	43db      	mvns	r3, r3
 8001300:	4619      	mov	r1, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	400a      	ands	r2, r1
 8001308:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6859      	ldr	r1, [r3, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	430a      	orrs	r2, r1
 8001318:	605a      	str	r2, [r3, #4]

		//5. configure the alt functionality
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	795b      	ldrb	r3, [r3, #5]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d131      	bne.n	8001386 <GPIO_Init+0x326>
		{
			//configure the alt function registers.
			uint8_t temp1, temp2;

			temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	791b      	ldrb	r3, [r3, #4]
 8001326:	08db      	lsrs	r3, r3, #3
 8001328:	743b      	strb	r3, [r7, #16]
			temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	791b      	ldrb	r3, [r3, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	73fb      	strb	r3, [r7, #15]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	7c3a      	ldrb	r2, [r7, #16]
 800133a:	3208      	adds	r2, #8
 800133c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	4618      	mov	r0, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	7c3a      	ldrb	r2, [r7, #16]
 8001354:	4001      	ands	r1, r0
 8001356:	3208      	adds	r2, #8
 8001358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	7c3a      	ldrb	r2, [r7, #16]
 8001362:	3208      	adds	r2, #8
 8001364:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7a5b      	ldrb	r3, [r3, #9]
 800136c:	461a      	mov	r2, r3
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	4618      	mov	r0, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	7c3a      	ldrb	r2, [r7, #16]
 800137e:	4301      	orrs	r1, r0
 8001380:	3208      	adds	r2, #8
 8001382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}



}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	40013800 	.word	0x40013800
 8001398:	40013c00 	.word	0x40013c00

0800139c <GPIO_WriteToOutputPin>:
 * @Note              -

 */

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
 80013a8:	4613      	mov	r3, r2
 80013aa:	70bb      	strb	r3, [r7, #2]


	if(Value == GPIO_PIN_SET)
 80013ac:	78bb      	ldrb	r3, [r7, #2]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d109      	bne.n	80013c6 <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to output data reg corrseponding to pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	78fa      	ldrb	r2, [r7, #3]
 80013b8:	2101      	movs	r1, #1
 80013ba:	fa01 f202 	lsl.w	r2, r1, r2
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	615a      	str	r2, [r3, #20]
	{
		//write 0 to output data reg
		pGPIOx->ODR &= ~( 1 << PinNumber);

	}
}
 80013c4:	e009      	b.n	80013da <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	78fa      	ldrb	r2, [r7, #3]
 80013cc:	2101      	movs	r1, #1
 80013ce:	fa01 f202 	lsl.w	r2, r1, r2
 80013d2:	43d2      	mvns	r2, r2
 80013d4:	401a      	ands	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	615a      	str	r2, [r3, #20]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	601a      	str	r2, [r3, #0]
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <I2C_ExecuteAddressPhaseWrite>:



static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	460b      	mov	r3, r1
 8001410:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8001418:	78fb      	ldrb	r3, [r7, #3]
 800141a:	f023 0301 	bic.w	r3, r3, #1
 800141e:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8001420:	78fa      	ldrb	r2, [r7, #3]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	611a      	str	r2, [r3, #16]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	460b      	mov	r3, r1
 800143c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8001444:	78fb      	ldrb	r3, [r7, #3]
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800144c:	78fa      	ldrb	r2, [r7, #3]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	611a      	str	r2, [r3, #16]
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b00      	cmp	r3, #0
 8001472:	d01f      	beq.n	80014b4 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	7f1b      	ldrb	r3, [r3, #28]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d112      	bne.n	80014a2 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d11f      	bne.n	80014c4 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fa5d 	bl	800194a <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 80014a0:	e010      	b.n	80014c4 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	60fb      	str	r3, [r7, #12]
}
 80014b2:	e007      	b.n	80014c4 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	60fb      	str	r3, [r7, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <I2C_GenerateStopCondition>:


 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	601a      	str	r2, [r3, #0]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <I2C_PeripheralControl>:
 *
 * @Note              -

 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80014f8:	78fb      	ldrb	r3, [r7, #3]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d106      	bne.n	800150c <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f043 0201 	orr.w	r2, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 800150a:	e005      	b.n	8001518 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f023 0201 	bic.w	r2, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	601a      	str	r2, [r3, #0]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <I2C_PeriClockControl>:
 *
 * @Note              -

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d120      	bne.n	8001578 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a22      	ldr	r2, [pc, #136]	; (80015c4 <I2C_PeriClockControl+0xa0>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d106      	bne.n	800154c <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 800153e:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <I2C_PeriClockControl+0xa4>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a21      	ldr	r2, [pc, #132]	; (80015c8 <I2C_PeriClockControl+0xa4>)
 8001544:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
					I2C3_PCLK_DI();
				}

	}

}
 800154a:	e035      	b.n	80015b8 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a1f      	ldr	r2, [pc, #124]	; (80015cc <I2C_PeriClockControl+0xa8>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d106      	bne.n	8001562 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8001554:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <I2C_PeriClockControl+0xa4>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	4a1b      	ldr	r2, [pc, #108]	; (80015c8 <I2C_PeriClockControl+0xa4>)
 800155a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800155e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001560:	e02a      	b.n	80015b8 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a1a      	ldr	r2, [pc, #104]	; (80015d0 <I2C_PeriClockControl+0xac>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d126      	bne.n	80015b8 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <I2C_PeriClockControl+0xa4>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a16      	ldr	r2, [pc, #88]	; (80015c8 <I2C_PeriClockControl+0xa4>)
 8001570:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001576:	e01f      	b.n	80015b8 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <I2C_PeriClockControl+0xa0>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d106      	bne.n	800158e <I2C_PeriClockControl+0x6a>
					I2C1_PCLK_DI();
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <I2C_PeriClockControl+0xa4>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	4a10      	ldr	r2, [pc, #64]	; (80015c8 <I2C_PeriClockControl+0xa4>)
 8001586:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800158a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800158c:	e014      	b.n	80015b8 <I2C_PeriClockControl+0x94>
				}else if (pI2Cx == I2C2)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <I2C_PeriClockControl+0xa8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d106      	bne.n	80015a4 <I2C_PeriClockControl+0x80>
					I2C2_PCLK_DI();
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <I2C_PeriClockControl+0xa4>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <I2C_PeriClockControl+0xa4>)
 800159c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80015a2:	e009      	b.n	80015b8 <I2C_PeriClockControl+0x94>
				}else if (pI2Cx == I2C3)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <I2C_PeriClockControl+0xac>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d105      	bne.n	80015b8 <I2C_PeriClockControl+0x94>
					I2C3_PCLK_DI();
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <I2C_PeriClockControl+0xa4>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <I2C_PeriClockControl+0xa4>)
 80015b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015b6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	40005400 	.word	0x40005400
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40005800 	.word	0x40005800
 80015d0:	40005c00 	.word	0x40005c00

080015d4 <I2C_Init>:
 *
 * @Note              -

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2101      	movs	r1, #1
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ff9c 	bl	8001524 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7a5b      	ldrb	r3, [r3, #9]
 80015f0:	029b      	lsls	r3, r3, #10
 80015f2:	461a      	mov	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8001606:	f000 f9bd 	bl	8001984 <RCC_GetPCLK1Value>
 800160a:	4602      	mov	r2, r0
 800160c:	4b47      	ldr	r3, [pc, #284]	; (800172c <I2C_Init+0x158>)
 800160e:	fba3 2302 	umull	r2, r3, r3, r2
 8001612:	0c9b      	lsrs	r3, r3, #18
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001624:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7a1b      	ldrb	r3, [r3, #8]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	461a      	mov	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4313      	orrs	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	4a36      	ldr	r2, [pc, #216]	; (8001730 <I2C_Init+0x15c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d80f      	bhi.n	800167a <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 800165a:	f000 f993 	bl	8001984 <RCC_GetPCLK1Value>
 800165e:	4602      	mov	r2, r0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fbb2 f3f3 	udiv	r3, r2, r3
 800166a:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 800166c:	897b      	ldrh	r3, [r7, #10]
 800166e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	4313      	orrs	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	e02d      	b.n	80016d6 <I2C_Init+0x102>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001680:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	7a9b      	ldrb	r3, [r3, #10]
 8001686:	039b      	lsls	r3, r3, #14
 8001688:	461a      	mov	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4313      	orrs	r3, r2
 800168e:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7a9b      	ldrb	r3, [r3, #10]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10b      	bne.n	80016b0 <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8001698:	f000 f974 	bl	8001984 <RCC_GetPCLK1Value>
 800169c:	4601      	mov	r1, r0
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ac:	817b      	strh	r3, [r7, #10]
 80016ae:	e00c      	b.n	80016ca <I2C_Init+0xf6>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80016b0:	f000 f968 	bl	8001984 <RCC_GetPCLK1Value>
 80016b4:	4601      	mov	r1, r0
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	009a      	lsls	r2, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016c8:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 80016ca:	897b      	ldrh	r3, [r7, #10]
 80016cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	4a13      	ldr	r2, [pc, #76]	; (8001730 <I2C_Init+0x15c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d809      	bhi.n	80016fc <I2C_Init+0x128>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 80016e8:	f000 f94c 	bl	8001984 <RCC_GetPCLK1Value>
 80016ec:	4602      	mov	r2, r0
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <I2C_Init+0x158>)
 80016f0:	fba3 2302 	umull	r2, r3, r3, r2
 80016f4:	0c9b      	lsrs	r3, r3, #18
 80016f6:	3301      	adds	r3, #1
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	e00d      	b.n	8001718 <I2C_Init+0x144>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 80016fc:	f000 f942 	bl	8001984 <RCC_GetPCLK1Value>
 8001700:	4602      	mov	r2, r0
 8001702:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001706:	fb03 f302 	mul.w	r3, r3, r2
 800170a:	0a5b      	lsrs	r3, r3, #9
 800170c:	4a09      	ldr	r2, [pc, #36]	; (8001734 <I2C_Init+0x160>)
 800170e:	fba2 2303 	umull	r2, r3, r2, r3
 8001712:	09db      	lsrs	r3, r3, #7
 8001714:	3301      	adds	r3, #1
 8001716:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001722:	621a      	str	r2, [r3, #32]

}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	431bde83 	.word	0x431bde83
 8001730:	000186a0 	.word	0x000186a0
 8001734:	00044b83 	.word	0x00044b83

08001738 <I2C_GetFlagStatus>:

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695a      	ldr	r2, [r3, #20]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	4013      	ands	r3, r2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <I2C_MasterSendData>:



void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fe37 	bl	80013e6 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8001778:	bf00      	nop
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2101      	movs	r1, #1
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ffd9 	bl	8001738 <I2C_GetFlagStatus>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f6      	beq.n	800177a <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	78fa      	ldrb	r2, [r7, #3]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fe36 	bl	8001406 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 800179a:	bf00      	nop
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2102      	movs	r1, #2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff ffc8 	bl	8001738 <I2C_GetFlagStatus>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f6      	beq.n	800179c <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f7ff fe55 	bl	800145e <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 80017b4:	e014      	b.n	80017e0 <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 80017b6:	bf00      	nop
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2180      	movs	r1, #128	; 0x80
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ffba 	bl	8001738 <I2C_GetFlagStatus>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f6      	beq.n	80017b8 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	781a      	ldrb	r2, [r3, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	3301      	adds	r3, #1
 80017d8:	60bb      	str	r3, [r7, #8]
		Len--;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3b01      	subs	r3, #1
 80017de:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1e7      	bne.n	80017b6 <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 80017e6:	bf00      	nop
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2180      	movs	r1, #128	; 0x80
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff ffa2 	bl	8001738 <I2C_GetFlagStatus>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f6      	beq.n	80017e8 <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 80017fa:	bf00      	nop
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2104      	movs	r1, #4
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff98 	bl	8001738 <I2C_GetFlagStatus>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f6      	beq.n	80017fc <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 800180e:	7e3b      	ldrb	r3, [r7, #24]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d104      	bne.n	800181e <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fe57 	bl	80014cc <I2C_GenerateStopCondition>

}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <I2C_MasterReceiveData>:


void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	4611      	mov	r1, r2
 8001832:	461a      	mov	r2, r3
 8001834:	460b      	mov	r3, r1
 8001836:	71fb      	strb	r3, [r7, #7]
 8001838:	4613      	mov	r3, r2
 800183a:	71bb      	strb	r3, [r7, #6]

	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fdd0 	bl	80013e6 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8001846:	bf00      	nop
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2101      	movs	r1, #1
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff72 	bl	8001738 <I2C_GetFlagStatus>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f6      	beq.n	8001848 <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	79ba      	ldrb	r2, [r7, #6]
 8001860:	4611      	mov	r1, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fde5 	bl	8001432 <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8001868:	bf00      	nop
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2102      	movs	r1, #2
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff61 	bl	8001738 <I2C_GetFlagStatus>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f6      	beq.n	800186a <I2C_MasterReceiveData+0x44>


	//procedure to read only 1 byte from slave
	if(Len == 1)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d121      	bne.n	80018c6 <I2C_MasterReceiveData+0xa0>
	{
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f000 f85e 	bl	800194a <I2C_ManageAcking>


		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f7ff fde5 	bl	800145e <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 8001894:	bf00      	nop
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2140      	movs	r1, #64	; 0x40
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff4b 	bl	8001738 <I2C_GetFlagStatus>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f6      	beq.n	8001896 <I2C_MasterReceiveData+0x70>

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR )
 80018a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d104      	bne.n	80018ba <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fe09 	bl	80014cc <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	701a      	strb	r2, [r3, #0]

	}


    //procedure to read data from slave when Len > 1
	if(Len > 1)
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d930      	bls.n	800192e <I2C_MasterReceiveData+0x108>
	{
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f7ff fdc6 	bl	800145e <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--)
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	e027      	b.n	8001928 <I2C_MasterReceiveData+0x102>
		{
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 80018d8:	bf00      	nop
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2140      	movs	r1, #64	; 0x40
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff29 	bl	8001738 <I2C_GetFlagStatus>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f6      	beq.n	80018da <I2C_MasterReceiveData+0xb4>

			if(i == 2) //if last 2 bytes are remaining
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d10e      	bne.n	8001910 <I2C_MasterReceiveData+0xea>
			{
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 f826 	bl	800194a <I2C_ManageAcking>

				//generate STOP condition
				if(Sr == I2C_DISABLE_SR )
 80018fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d104      	bne.n	8001910 <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fdde 	bl	80014cc <I2C_GenerateStopCondition>

			}

			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	3301      	adds	r3, #1
 8001920:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3b01      	subs	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1d4      	bne.n	80018d8 <I2C_MasterReceiveData+0xb2>
		}

	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	7a5b      	ldrb	r3, [r3, #9]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d105      	bne.n	8001942 <I2C_MasterReceiveData+0x11c>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2101      	movs	r1, #1
 800193c:	4618      	mov	r0, r3
 800193e:	f000 f804 	bl	800194a <I2C_ManageAcking>
	}

}
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d106      	bne.n	800196a <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8001968:	e005      	b.n	8001976 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	601a      	str	r2, [r3, #0]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 800198a:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <RCC_GetPCLK1Value+0x9c>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8001998:	7a7b      	ldrb	r3, [r7, #9]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d102      	bne.n	80019a4 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 800199e:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <RCC_GetPCLK1Value+0xa0>)
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	e00b      	b.n	80019bc <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 80019a4:	7a7b      	ldrb	r3, [r7, #9]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d102      	bne.n	80019b0 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 80019aa:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <RCC_GetPCLK1Value+0xa4>)
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	e005      	b.n	80019bc <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 80019b0:	7a7b      	ldrb	r3, [r7, #9]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d102      	bne.n	80019bc <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 80019b6:	f000 f83d 	bl	8001a34 <RCC_GetPLLOutputClock>
 80019ba:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 80019bc:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <RCC_GetPCLK1Value+0x9c>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	f003 030f 	and.w	r3, r3, #15
 80019c8:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 80019ca:	7a3b      	ldrb	r3, [r7, #8]
 80019cc:	2b07      	cmp	r3, #7
 80019ce:	d802      	bhi.n	80019d6 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 80019d0:	2301      	movs	r3, #1
 80019d2:	72fb      	strb	r3, [r7, #11]
 80019d4:	e005      	b.n	80019e2 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 80019d6:	7a3b      	ldrb	r3, [r7, #8]
 80019d8:	3b08      	subs	r3, #8
 80019da:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <RCC_GetPCLK1Value+0xa8>)
 80019dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019e0:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <RCC_GetPCLK1Value+0x9c>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	0a9b      	lsrs	r3, r3, #10
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 80019f0:	7a3b      	ldrb	r3, [r7, #8]
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d802      	bhi.n	80019fc <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 80019f6:	2301      	movs	r3, #1
 80019f8:	72bb      	strb	r3, [r7, #10]
 80019fa:	e004      	b.n	8001a06 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 80019fc:	7a3b      	ldrb	r3, [r7, #8]
 80019fe:	3b04      	subs	r3, #4
 8001a00:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <RCC_GetPCLK1Value+0xac>)
 8001a02:	5cd3      	ldrb	r3, [r2, r3]
 8001a04:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8001a06:	7afb      	ldrb	r3, [r7, #11]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a0e:	7abb      	ldrb	r3, [r7, #10]
 8001a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a14:	607b      	str	r3, [r7, #4]

	return pclk1;
 8001a16:	687b      	ldr	r3, [r7, #4]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	00f42400 	.word	0x00f42400
 8001a28:	007a1200 	.word	0x007a1200
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	20000010 	.word	0x20000010

08001a34 <RCC_GetPLLOutputClock>:

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock()
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0

	return 0;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <__errno>:
 8001a44:	4b01      	ldr	r3, [pc, #4]	; (8001a4c <__errno+0x8>)
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000014 	.word	0x20000014

08001a50 <__libc_init_array>:
 8001a50:	b570      	push	{r4, r5, r6, lr}
 8001a52:	4e0d      	ldr	r6, [pc, #52]	; (8001a88 <__libc_init_array+0x38>)
 8001a54:	4c0d      	ldr	r4, [pc, #52]	; (8001a8c <__libc_init_array+0x3c>)
 8001a56:	1ba4      	subs	r4, r4, r6
 8001a58:	10a4      	asrs	r4, r4, #2
 8001a5a:	2500      	movs	r5, #0
 8001a5c:	42a5      	cmp	r5, r4
 8001a5e:	d109      	bne.n	8001a74 <__libc_init_array+0x24>
 8001a60:	4e0b      	ldr	r6, [pc, #44]	; (8001a90 <__libc_init_array+0x40>)
 8001a62:	4c0c      	ldr	r4, [pc, #48]	; (8001a94 <__libc_init_array+0x44>)
 8001a64:	f000 ff68 	bl	8002938 <_init>
 8001a68:	1ba4      	subs	r4, r4, r6
 8001a6a:	10a4      	asrs	r4, r4, #2
 8001a6c:	2500      	movs	r5, #0
 8001a6e:	42a5      	cmp	r5, r4
 8001a70:	d105      	bne.n	8001a7e <__libc_init_array+0x2e>
 8001a72:	bd70      	pop	{r4, r5, r6, pc}
 8001a74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a78:	4798      	blx	r3
 8001a7a:	3501      	adds	r5, #1
 8001a7c:	e7ee      	b.n	8001a5c <__libc_init_array+0xc>
 8001a7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a82:	4798      	blx	r3
 8001a84:	3501      	adds	r5, #1
 8001a86:	e7f2      	b.n	8001a6e <__libc_init_array+0x1e>
 8001a88:	08002ac0 	.word	0x08002ac0
 8001a8c:	08002ac0 	.word	0x08002ac0
 8001a90:	08002ac0 	.word	0x08002ac0
 8001a94:	08002ac4 	.word	0x08002ac4

08001a98 <memset>:
 8001a98:	4402      	add	r2, r0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d100      	bne.n	8001aa2 <memset+0xa>
 8001aa0:	4770      	bx	lr
 8001aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8001aa6:	e7f9      	b.n	8001a9c <memset+0x4>

08001aa8 <iprintf>:
 8001aa8:	b40f      	push	{r0, r1, r2, r3}
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <iprintf+0x2c>)
 8001aac:	b513      	push	{r0, r1, r4, lr}
 8001aae:	681c      	ldr	r4, [r3, #0]
 8001ab0:	b124      	cbz	r4, 8001abc <iprintf+0x14>
 8001ab2:	69a3      	ldr	r3, [r4, #24]
 8001ab4:	b913      	cbnz	r3, 8001abc <iprintf+0x14>
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f000 fa22 	bl	8001f00 <__sinit>
 8001abc:	ab05      	add	r3, sp, #20
 8001abe:	9a04      	ldr	r2, [sp, #16]
 8001ac0:	68a1      	ldr	r1, [r4, #8]
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	f000 fbdb 	bl	8002280 <_vfiprintf_r>
 8001aca:	b002      	add	sp, #8
 8001acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ad0:	b004      	add	sp, #16
 8001ad2:	4770      	bx	lr
 8001ad4:	20000014 	.word	0x20000014

08001ad8 <_puts_r>:
 8001ad8:	b570      	push	{r4, r5, r6, lr}
 8001ada:	460e      	mov	r6, r1
 8001adc:	4605      	mov	r5, r0
 8001ade:	b118      	cbz	r0, 8001ae8 <_puts_r+0x10>
 8001ae0:	6983      	ldr	r3, [r0, #24]
 8001ae2:	b90b      	cbnz	r3, 8001ae8 <_puts_r+0x10>
 8001ae4:	f000 fa0c 	bl	8001f00 <__sinit>
 8001ae8:	69ab      	ldr	r3, [r5, #24]
 8001aea:	68ac      	ldr	r4, [r5, #8]
 8001aec:	b913      	cbnz	r3, 8001af4 <_puts_r+0x1c>
 8001aee:	4628      	mov	r0, r5
 8001af0:	f000 fa06 	bl	8001f00 <__sinit>
 8001af4:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <_puts_r+0xac>)
 8001af6:	429c      	cmp	r4, r3
 8001af8:	d117      	bne.n	8001b2a <_puts_r+0x52>
 8001afa:	686c      	ldr	r4, [r5, #4]
 8001afc:	89a3      	ldrh	r3, [r4, #12]
 8001afe:	071b      	lsls	r3, r3, #28
 8001b00:	d51d      	bpl.n	8001b3e <_puts_r+0x66>
 8001b02:	6923      	ldr	r3, [r4, #16]
 8001b04:	b1db      	cbz	r3, 8001b3e <_puts_r+0x66>
 8001b06:	3e01      	subs	r6, #1
 8001b08:	68a3      	ldr	r3, [r4, #8]
 8001b0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	60a3      	str	r3, [r4, #8]
 8001b12:	b9e9      	cbnz	r1, 8001b50 <_puts_r+0x78>
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	da2e      	bge.n	8001b76 <_puts_r+0x9e>
 8001b18:	4622      	mov	r2, r4
 8001b1a:	210a      	movs	r1, #10
 8001b1c:	4628      	mov	r0, r5
 8001b1e:	f000 f83f 	bl	8001ba0 <__swbuf_r>
 8001b22:	3001      	adds	r0, #1
 8001b24:	d011      	beq.n	8001b4a <_puts_r+0x72>
 8001b26:	200a      	movs	r0, #10
 8001b28:	e011      	b.n	8001b4e <_puts_r+0x76>
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <_puts_r+0xb0>)
 8001b2c:	429c      	cmp	r4, r3
 8001b2e:	d101      	bne.n	8001b34 <_puts_r+0x5c>
 8001b30:	68ac      	ldr	r4, [r5, #8]
 8001b32:	e7e3      	b.n	8001afc <_puts_r+0x24>
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <_puts_r+0xb4>)
 8001b36:	429c      	cmp	r4, r3
 8001b38:	bf08      	it	eq
 8001b3a:	68ec      	ldreq	r4, [r5, #12]
 8001b3c:	e7de      	b.n	8001afc <_puts_r+0x24>
 8001b3e:	4621      	mov	r1, r4
 8001b40:	4628      	mov	r0, r5
 8001b42:	f000 f87f 	bl	8001c44 <__swsetup_r>
 8001b46:	2800      	cmp	r0, #0
 8001b48:	d0dd      	beq.n	8001b06 <_puts_r+0x2e>
 8001b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4e:	bd70      	pop	{r4, r5, r6, pc}
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	da04      	bge.n	8001b5e <_puts_r+0x86>
 8001b54:	69a2      	ldr	r2, [r4, #24]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	dc06      	bgt.n	8001b68 <_puts_r+0x90>
 8001b5a:	290a      	cmp	r1, #10
 8001b5c:	d004      	beq.n	8001b68 <_puts_r+0x90>
 8001b5e:	6823      	ldr	r3, [r4, #0]
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	6022      	str	r2, [r4, #0]
 8001b64:	7019      	strb	r1, [r3, #0]
 8001b66:	e7cf      	b.n	8001b08 <_puts_r+0x30>
 8001b68:	4622      	mov	r2, r4
 8001b6a:	4628      	mov	r0, r5
 8001b6c:	f000 f818 	bl	8001ba0 <__swbuf_r>
 8001b70:	3001      	adds	r0, #1
 8001b72:	d1c9      	bne.n	8001b08 <_puts_r+0x30>
 8001b74:	e7e9      	b.n	8001b4a <_puts_r+0x72>
 8001b76:	6823      	ldr	r3, [r4, #0]
 8001b78:	200a      	movs	r0, #10
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	6022      	str	r2, [r4, #0]
 8001b7e:	7018      	strb	r0, [r3, #0]
 8001b80:	e7e5      	b.n	8001b4e <_puts_r+0x76>
 8001b82:	bf00      	nop
 8001b84:	08002a4c 	.word	0x08002a4c
 8001b88:	08002a6c 	.word	0x08002a6c
 8001b8c:	08002a2c 	.word	0x08002a2c

08001b90 <puts>:
 8001b90:	4b02      	ldr	r3, [pc, #8]	; (8001b9c <puts+0xc>)
 8001b92:	4601      	mov	r1, r0
 8001b94:	6818      	ldr	r0, [r3, #0]
 8001b96:	f7ff bf9f 	b.w	8001ad8 <_puts_r>
 8001b9a:	bf00      	nop
 8001b9c:	20000014 	.word	0x20000014

08001ba0 <__swbuf_r>:
 8001ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ba2:	460e      	mov	r6, r1
 8001ba4:	4614      	mov	r4, r2
 8001ba6:	4605      	mov	r5, r0
 8001ba8:	b118      	cbz	r0, 8001bb2 <__swbuf_r+0x12>
 8001baa:	6983      	ldr	r3, [r0, #24]
 8001bac:	b90b      	cbnz	r3, 8001bb2 <__swbuf_r+0x12>
 8001bae:	f000 f9a7 	bl	8001f00 <__sinit>
 8001bb2:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <__swbuf_r+0x98>)
 8001bb4:	429c      	cmp	r4, r3
 8001bb6:	d12a      	bne.n	8001c0e <__swbuf_r+0x6e>
 8001bb8:	686c      	ldr	r4, [r5, #4]
 8001bba:	69a3      	ldr	r3, [r4, #24]
 8001bbc:	60a3      	str	r3, [r4, #8]
 8001bbe:	89a3      	ldrh	r3, [r4, #12]
 8001bc0:	071a      	lsls	r2, r3, #28
 8001bc2:	d52e      	bpl.n	8001c22 <__swbuf_r+0x82>
 8001bc4:	6923      	ldr	r3, [r4, #16]
 8001bc6:	b363      	cbz	r3, 8001c22 <__swbuf_r+0x82>
 8001bc8:	6923      	ldr	r3, [r4, #16]
 8001bca:	6820      	ldr	r0, [r4, #0]
 8001bcc:	1ac0      	subs	r0, r0, r3
 8001bce:	6963      	ldr	r3, [r4, #20]
 8001bd0:	b2f6      	uxtb	r6, r6
 8001bd2:	4283      	cmp	r3, r0
 8001bd4:	4637      	mov	r7, r6
 8001bd6:	dc04      	bgt.n	8001be2 <__swbuf_r+0x42>
 8001bd8:	4621      	mov	r1, r4
 8001bda:	4628      	mov	r0, r5
 8001bdc:	f000 f926 	bl	8001e2c <_fflush_r>
 8001be0:	bb28      	cbnz	r0, 8001c2e <__swbuf_r+0x8e>
 8001be2:	68a3      	ldr	r3, [r4, #8]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	60a3      	str	r3, [r4, #8]
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	6022      	str	r2, [r4, #0]
 8001bee:	701e      	strb	r6, [r3, #0]
 8001bf0:	6963      	ldr	r3, [r4, #20]
 8001bf2:	3001      	adds	r0, #1
 8001bf4:	4283      	cmp	r3, r0
 8001bf6:	d004      	beq.n	8001c02 <__swbuf_r+0x62>
 8001bf8:	89a3      	ldrh	r3, [r4, #12]
 8001bfa:	07db      	lsls	r3, r3, #31
 8001bfc:	d519      	bpl.n	8001c32 <__swbuf_r+0x92>
 8001bfe:	2e0a      	cmp	r6, #10
 8001c00:	d117      	bne.n	8001c32 <__swbuf_r+0x92>
 8001c02:	4621      	mov	r1, r4
 8001c04:	4628      	mov	r0, r5
 8001c06:	f000 f911 	bl	8001e2c <_fflush_r>
 8001c0a:	b190      	cbz	r0, 8001c32 <__swbuf_r+0x92>
 8001c0c:	e00f      	b.n	8001c2e <__swbuf_r+0x8e>
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <__swbuf_r+0x9c>)
 8001c10:	429c      	cmp	r4, r3
 8001c12:	d101      	bne.n	8001c18 <__swbuf_r+0x78>
 8001c14:	68ac      	ldr	r4, [r5, #8]
 8001c16:	e7d0      	b.n	8001bba <__swbuf_r+0x1a>
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <__swbuf_r+0xa0>)
 8001c1a:	429c      	cmp	r4, r3
 8001c1c:	bf08      	it	eq
 8001c1e:	68ec      	ldreq	r4, [r5, #12]
 8001c20:	e7cb      	b.n	8001bba <__swbuf_r+0x1a>
 8001c22:	4621      	mov	r1, r4
 8001c24:	4628      	mov	r0, r5
 8001c26:	f000 f80d 	bl	8001c44 <__swsetup_r>
 8001c2a:	2800      	cmp	r0, #0
 8001c2c:	d0cc      	beq.n	8001bc8 <__swbuf_r+0x28>
 8001c2e:	f04f 37ff 	mov.w	r7, #4294967295
 8001c32:	4638      	mov	r0, r7
 8001c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c36:	bf00      	nop
 8001c38:	08002a4c 	.word	0x08002a4c
 8001c3c:	08002a6c 	.word	0x08002a6c
 8001c40:	08002a2c 	.word	0x08002a2c

08001c44 <__swsetup_r>:
 8001c44:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <__swsetup_r+0xcc>)
 8001c46:	b570      	push	{r4, r5, r6, lr}
 8001c48:	681d      	ldr	r5, [r3, #0]
 8001c4a:	4606      	mov	r6, r0
 8001c4c:	460c      	mov	r4, r1
 8001c4e:	b125      	cbz	r5, 8001c5a <__swsetup_r+0x16>
 8001c50:	69ab      	ldr	r3, [r5, #24]
 8001c52:	b913      	cbnz	r3, 8001c5a <__swsetup_r+0x16>
 8001c54:	4628      	mov	r0, r5
 8001c56:	f000 f953 	bl	8001f00 <__sinit>
 8001c5a:	4b2e      	ldr	r3, [pc, #184]	; (8001d14 <__swsetup_r+0xd0>)
 8001c5c:	429c      	cmp	r4, r3
 8001c5e:	d10f      	bne.n	8001c80 <__swsetup_r+0x3c>
 8001c60:	686c      	ldr	r4, [r5, #4]
 8001c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	0715      	lsls	r5, r2, #28
 8001c6a:	d42c      	bmi.n	8001cc6 <__swsetup_r+0x82>
 8001c6c:	06d0      	lsls	r0, r2, #27
 8001c6e:	d411      	bmi.n	8001c94 <__swsetup_r+0x50>
 8001c70:	2209      	movs	r2, #9
 8001c72:	6032      	str	r2, [r6, #0]
 8001c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c78:	81a3      	strh	r3, [r4, #12]
 8001c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7e:	e03e      	b.n	8001cfe <__swsetup_r+0xba>
 8001c80:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <__swsetup_r+0xd4>)
 8001c82:	429c      	cmp	r4, r3
 8001c84:	d101      	bne.n	8001c8a <__swsetup_r+0x46>
 8001c86:	68ac      	ldr	r4, [r5, #8]
 8001c88:	e7eb      	b.n	8001c62 <__swsetup_r+0x1e>
 8001c8a:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <__swsetup_r+0xd8>)
 8001c8c:	429c      	cmp	r4, r3
 8001c8e:	bf08      	it	eq
 8001c90:	68ec      	ldreq	r4, [r5, #12]
 8001c92:	e7e6      	b.n	8001c62 <__swsetup_r+0x1e>
 8001c94:	0751      	lsls	r1, r2, #29
 8001c96:	d512      	bpl.n	8001cbe <__swsetup_r+0x7a>
 8001c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c9a:	b141      	cbz	r1, 8001cae <__swsetup_r+0x6a>
 8001c9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ca0:	4299      	cmp	r1, r3
 8001ca2:	d002      	beq.n	8001caa <__swsetup_r+0x66>
 8001ca4:	4630      	mov	r0, r6
 8001ca6:	f000 fa19 	bl	80020dc <_free_r>
 8001caa:	2300      	movs	r3, #0
 8001cac:	6363      	str	r3, [r4, #52]	; 0x34
 8001cae:	89a3      	ldrh	r3, [r4, #12]
 8001cb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001cb4:	81a3      	strh	r3, [r4, #12]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	6063      	str	r3, [r4, #4]
 8001cba:	6923      	ldr	r3, [r4, #16]
 8001cbc:	6023      	str	r3, [r4, #0]
 8001cbe:	89a3      	ldrh	r3, [r4, #12]
 8001cc0:	f043 0308 	orr.w	r3, r3, #8
 8001cc4:	81a3      	strh	r3, [r4, #12]
 8001cc6:	6923      	ldr	r3, [r4, #16]
 8001cc8:	b94b      	cbnz	r3, 8001cde <__swsetup_r+0x9a>
 8001cca:	89a3      	ldrh	r3, [r4, #12]
 8001ccc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cd4:	d003      	beq.n	8001cde <__swsetup_r+0x9a>
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	4630      	mov	r0, r6
 8001cda:	f000 f9bf 	bl	800205c <__smakebuf_r>
 8001cde:	89a2      	ldrh	r2, [r4, #12]
 8001ce0:	f012 0301 	ands.w	r3, r2, #1
 8001ce4:	d00c      	beq.n	8001d00 <__swsetup_r+0xbc>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60a3      	str	r3, [r4, #8]
 8001cea:	6963      	ldr	r3, [r4, #20]
 8001cec:	425b      	negs	r3, r3
 8001cee:	61a3      	str	r3, [r4, #24]
 8001cf0:	6923      	ldr	r3, [r4, #16]
 8001cf2:	b953      	cbnz	r3, 8001d0a <__swsetup_r+0xc6>
 8001cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cf8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001cfc:	d1ba      	bne.n	8001c74 <__swsetup_r+0x30>
 8001cfe:	bd70      	pop	{r4, r5, r6, pc}
 8001d00:	0792      	lsls	r2, r2, #30
 8001d02:	bf58      	it	pl
 8001d04:	6963      	ldrpl	r3, [r4, #20]
 8001d06:	60a3      	str	r3, [r4, #8]
 8001d08:	e7f2      	b.n	8001cf0 <__swsetup_r+0xac>
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	e7f7      	b.n	8001cfe <__swsetup_r+0xba>
 8001d0e:	bf00      	nop
 8001d10:	20000014 	.word	0x20000014
 8001d14:	08002a4c 	.word	0x08002a4c
 8001d18:	08002a6c 	.word	0x08002a6c
 8001d1c:	08002a2c 	.word	0x08002a2c

08001d20 <__sflush_r>:
 8001d20:	898a      	ldrh	r2, [r1, #12]
 8001d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d26:	4605      	mov	r5, r0
 8001d28:	0710      	lsls	r0, r2, #28
 8001d2a:	460c      	mov	r4, r1
 8001d2c:	d458      	bmi.n	8001de0 <__sflush_r+0xc0>
 8001d2e:	684b      	ldr	r3, [r1, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	dc05      	bgt.n	8001d40 <__sflush_r+0x20>
 8001d34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	dc02      	bgt.n	8001d40 <__sflush_r+0x20>
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d42:	2e00      	cmp	r6, #0
 8001d44:	d0f9      	beq.n	8001d3a <__sflush_r+0x1a>
 8001d46:	2300      	movs	r3, #0
 8001d48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d4c:	682f      	ldr	r7, [r5, #0]
 8001d4e:	6a21      	ldr	r1, [r4, #32]
 8001d50:	602b      	str	r3, [r5, #0]
 8001d52:	d032      	beq.n	8001dba <__sflush_r+0x9a>
 8001d54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d56:	89a3      	ldrh	r3, [r4, #12]
 8001d58:	075a      	lsls	r2, r3, #29
 8001d5a:	d505      	bpl.n	8001d68 <__sflush_r+0x48>
 8001d5c:	6863      	ldr	r3, [r4, #4]
 8001d5e:	1ac0      	subs	r0, r0, r3
 8001d60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d62:	b10b      	cbz	r3, 8001d68 <__sflush_r+0x48>
 8001d64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d66:	1ac0      	subs	r0, r0, r3
 8001d68:	2300      	movs	r3, #0
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d6e:	6a21      	ldr	r1, [r4, #32]
 8001d70:	4628      	mov	r0, r5
 8001d72:	47b0      	blx	r6
 8001d74:	1c43      	adds	r3, r0, #1
 8001d76:	89a3      	ldrh	r3, [r4, #12]
 8001d78:	d106      	bne.n	8001d88 <__sflush_r+0x68>
 8001d7a:	6829      	ldr	r1, [r5, #0]
 8001d7c:	291d      	cmp	r1, #29
 8001d7e:	d848      	bhi.n	8001e12 <__sflush_r+0xf2>
 8001d80:	4a29      	ldr	r2, [pc, #164]	; (8001e28 <__sflush_r+0x108>)
 8001d82:	40ca      	lsrs	r2, r1
 8001d84:	07d6      	lsls	r6, r2, #31
 8001d86:	d544      	bpl.n	8001e12 <__sflush_r+0xf2>
 8001d88:	2200      	movs	r2, #0
 8001d8a:	6062      	str	r2, [r4, #4]
 8001d8c:	04d9      	lsls	r1, r3, #19
 8001d8e:	6922      	ldr	r2, [r4, #16]
 8001d90:	6022      	str	r2, [r4, #0]
 8001d92:	d504      	bpl.n	8001d9e <__sflush_r+0x7e>
 8001d94:	1c42      	adds	r2, r0, #1
 8001d96:	d101      	bne.n	8001d9c <__sflush_r+0x7c>
 8001d98:	682b      	ldr	r3, [r5, #0]
 8001d9a:	b903      	cbnz	r3, 8001d9e <__sflush_r+0x7e>
 8001d9c:	6560      	str	r0, [r4, #84]	; 0x54
 8001d9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001da0:	602f      	str	r7, [r5, #0]
 8001da2:	2900      	cmp	r1, #0
 8001da4:	d0c9      	beq.n	8001d3a <__sflush_r+0x1a>
 8001da6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001daa:	4299      	cmp	r1, r3
 8001dac:	d002      	beq.n	8001db4 <__sflush_r+0x94>
 8001dae:	4628      	mov	r0, r5
 8001db0:	f000 f994 	bl	80020dc <_free_r>
 8001db4:	2000      	movs	r0, #0
 8001db6:	6360      	str	r0, [r4, #52]	; 0x34
 8001db8:	e7c0      	b.n	8001d3c <__sflush_r+0x1c>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	4628      	mov	r0, r5
 8001dbe:	47b0      	blx	r6
 8001dc0:	1c41      	adds	r1, r0, #1
 8001dc2:	d1c8      	bne.n	8001d56 <__sflush_r+0x36>
 8001dc4:	682b      	ldr	r3, [r5, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0c5      	beq.n	8001d56 <__sflush_r+0x36>
 8001dca:	2b1d      	cmp	r3, #29
 8001dcc:	d001      	beq.n	8001dd2 <__sflush_r+0xb2>
 8001dce:	2b16      	cmp	r3, #22
 8001dd0:	d101      	bne.n	8001dd6 <__sflush_r+0xb6>
 8001dd2:	602f      	str	r7, [r5, #0]
 8001dd4:	e7b1      	b.n	8001d3a <__sflush_r+0x1a>
 8001dd6:	89a3      	ldrh	r3, [r4, #12]
 8001dd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ddc:	81a3      	strh	r3, [r4, #12]
 8001dde:	e7ad      	b.n	8001d3c <__sflush_r+0x1c>
 8001de0:	690f      	ldr	r7, [r1, #16]
 8001de2:	2f00      	cmp	r7, #0
 8001de4:	d0a9      	beq.n	8001d3a <__sflush_r+0x1a>
 8001de6:	0793      	lsls	r3, r2, #30
 8001de8:	680e      	ldr	r6, [r1, #0]
 8001dea:	bf08      	it	eq
 8001dec:	694b      	ldreq	r3, [r1, #20]
 8001dee:	600f      	str	r7, [r1, #0]
 8001df0:	bf18      	it	ne
 8001df2:	2300      	movne	r3, #0
 8001df4:	eba6 0807 	sub.w	r8, r6, r7
 8001df8:	608b      	str	r3, [r1, #8]
 8001dfa:	f1b8 0f00 	cmp.w	r8, #0
 8001dfe:	dd9c      	ble.n	8001d3a <__sflush_r+0x1a>
 8001e00:	4643      	mov	r3, r8
 8001e02:	463a      	mov	r2, r7
 8001e04:	6a21      	ldr	r1, [r4, #32]
 8001e06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001e08:	4628      	mov	r0, r5
 8001e0a:	47b0      	blx	r6
 8001e0c:	2800      	cmp	r0, #0
 8001e0e:	dc06      	bgt.n	8001e1e <__sflush_r+0xfe>
 8001e10:	89a3      	ldrh	r3, [r4, #12]
 8001e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e16:	81a3      	strh	r3, [r4, #12]
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1c:	e78e      	b.n	8001d3c <__sflush_r+0x1c>
 8001e1e:	4407      	add	r7, r0
 8001e20:	eba8 0800 	sub.w	r8, r8, r0
 8001e24:	e7e9      	b.n	8001dfa <__sflush_r+0xda>
 8001e26:	bf00      	nop
 8001e28:	20400001 	.word	0x20400001

08001e2c <_fflush_r>:
 8001e2c:	b538      	push	{r3, r4, r5, lr}
 8001e2e:	690b      	ldr	r3, [r1, #16]
 8001e30:	4605      	mov	r5, r0
 8001e32:	460c      	mov	r4, r1
 8001e34:	b1db      	cbz	r3, 8001e6e <_fflush_r+0x42>
 8001e36:	b118      	cbz	r0, 8001e40 <_fflush_r+0x14>
 8001e38:	6983      	ldr	r3, [r0, #24]
 8001e3a:	b90b      	cbnz	r3, 8001e40 <_fflush_r+0x14>
 8001e3c:	f000 f860 	bl	8001f00 <__sinit>
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <_fflush_r+0x48>)
 8001e42:	429c      	cmp	r4, r3
 8001e44:	d109      	bne.n	8001e5a <_fflush_r+0x2e>
 8001e46:	686c      	ldr	r4, [r5, #4]
 8001e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e4c:	b17b      	cbz	r3, 8001e6e <_fflush_r+0x42>
 8001e4e:	4621      	mov	r1, r4
 8001e50:	4628      	mov	r0, r5
 8001e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e56:	f7ff bf63 	b.w	8001d20 <__sflush_r>
 8001e5a:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <_fflush_r+0x4c>)
 8001e5c:	429c      	cmp	r4, r3
 8001e5e:	d101      	bne.n	8001e64 <_fflush_r+0x38>
 8001e60:	68ac      	ldr	r4, [r5, #8]
 8001e62:	e7f1      	b.n	8001e48 <_fflush_r+0x1c>
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <_fflush_r+0x50>)
 8001e66:	429c      	cmp	r4, r3
 8001e68:	bf08      	it	eq
 8001e6a:	68ec      	ldreq	r4, [r5, #12]
 8001e6c:	e7ec      	b.n	8001e48 <_fflush_r+0x1c>
 8001e6e:	2000      	movs	r0, #0
 8001e70:	bd38      	pop	{r3, r4, r5, pc}
 8001e72:	bf00      	nop
 8001e74:	08002a4c 	.word	0x08002a4c
 8001e78:	08002a6c 	.word	0x08002a6c
 8001e7c:	08002a2c 	.word	0x08002a2c

08001e80 <std>:
 8001e80:	2300      	movs	r3, #0
 8001e82:	b510      	push	{r4, lr}
 8001e84:	4604      	mov	r4, r0
 8001e86:	e9c0 3300 	strd	r3, r3, [r0]
 8001e8a:	6083      	str	r3, [r0, #8]
 8001e8c:	8181      	strh	r1, [r0, #12]
 8001e8e:	6643      	str	r3, [r0, #100]	; 0x64
 8001e90:	81c2      	strh	r2, [r0, #14]
 8001e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e96:	6183      	str	r3, [r0, #24]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	2208      	movs	r2, #8
 8001e9c:	305c      	adds	r0, #92	; 0x5c
 8001e9e:	f7ff fdfb 	bl	8001a98 <memset>
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <std+0x38>)
 8001ea4:	6263      	str	r3, [r4, #36]	; 0x24
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <std+0x3c>)
 8001ea8:	62a3      	str	r3, [r4, #40]	; 0x28
 8001eaa:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <std+0x40>)
 8001eac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <std+0x44>)
 8001eb0:	6224      	str	r4, [r4, #32]
 8001eb2:	6323      	str	r3, [r4, #48]	; 0x30
 8001eb4:	bd10      	pop	{r4, pc}
 8001eb6:	bf00      	nop
 8001eb8:	080027dd 	.word	0x080027dd
 8001ebc:	080027ff 	.word	0x080027ff
 8001ec0:	08002837 	.word	0x08002837
 8001ec4:	0800285b 	.word	0x0800285b

08001ec8 <_cleanup_r>:
 8001ec8:	4901      	ldr	r1, [pc, #4]	; (8001ed0 <_cleanup_r+0x8>)
 8001eca:	f000 b885 	b.w	8001fd8 <_fwalk_reent>
 8001ece:	bf00      	nop
 8001ed0:	08001e2d 	.word	0x08001e2d

08001ed4 <__sfmoreglue>:
 8001ed4:	b570      	push	{r4, r5, r6, lr}
 8001ed6:	1e4a      	subs	r2, r1, #1
 8001ed8:	2568      	movs	r5, #104	; 0x68
 8001eda:	4355      	muls	r5, r2
 8001edc:	460e      	mov	r6, r1
 8001ede:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001ee2:	f000 f949 	bl	8002178 <_malloc_r>
 8001ee6:	4604      	mov	r4, r0
 8001ee8:	b140      	cbz	r0, 8001efc <__sfmoreglue+0x28>
 8001eea:	2100      	movs	r1, #0
 8001eec:	e9c0 1600 	strd	r1, r6, [r0]
 8001ef0:	300c      	adds	r0, #12
 8001ef2:	60a0      	str	r0, [r4, #8]
 8001ef4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ef8:	f7ff fdce 	bl	8001a98 <memset>
 8001efc:	4620      	mov	r0, r4
 8001efe:	bd70      	pop	{r4, r5, r6, pc}

08001f00 <__sinit>:
 8001f00:	6983      	ldr	r3, [r0, #24]
 8001f02:	b510      	push	{r4, lr}
 8001f04:	4604      	mov	r4, r0
 8001f06:	bb33      	cbnz	r3, 8001f56 <__sinit+0x56>
 8001f08:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001f0c:	6503      	str	r3, [r0, #80]	; 0x50
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <__sinit+0x58>)
 8001f10:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <__sinit+0x5c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6282      	str	r2, [r0, #40]	; 0x28
 8001f16:	4298      	cmp	r0, r3
 8001f18:	bf04      	itt	eq
 8001f1a:	2301      	moveq	r3, #1
 8001f1c:	6183      	streq	r3, [r0, #24]
 8001f1e:	f000 f81f 	bl	8001f60 <__sfp>
 8001f22:	6060      	str	r0, [r4, #4]
 8001f24:	4620      	mov	r0, r4
 8001f26:	f000 f81b 	bl	8001f60 <__sfp>
 8001f2a:	60a0      	str	r0, [r4, #8]
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f000 f817 	bl	8001f60 <__sfp>
 8001f32:	2200      	movs	r2, #0
 8001f34:	60e0      	str	r0, [r4, #12]
 8001f36:	2104      	movs	r1, #4
 8001f38:	6860      	ldr	r0, [r4, #4]
 8001f3a:	f7ff ffa1 	bl	8001e80 <std>
 8001f3e:	2201      	movs	r2, #1
 8001f40:	2109      	movs	r1, #9
 8001f42:	68a0      	ldr	r0, [r4, #8]
 8001f44:	f7ff ff9c 	bl	8001e80 <std>
 8001f48:	2202      	movs	r2, #2
 8001f4a:	2112      	movs	r1, #18
 8001f4c:	68e0      	ldr	r0, [r4, #12]
 8001f4e:	f7ff ff97 	bl	8001e80 <std>
 8001f52:	2301      	movs	r3, #1
 8001f54:	61a3      	str	r3, [r4, #24]
 8001f56:	bd10      	pop	{r4, pc}
 8001f58:	08002a28 	.word	0x08002a28
 8001f5c:	08001ec9 	.word	0x08001ec9

08001f60 <__sfp>:
 8001f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f62:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <__sfp+0x70>)
 8001f64:	681e      	ldr	r6, [r3, #0]
 8001f66:	69b3      	ldr	r3, [r6, #24]
 8001f68:	4607      	mov	r7, r0
 8001f6a:	b913      	cbnz	r3, 8001f72 <__sfp+0x12>
 8001f6c:	4630      	mov	r0, r6
 8001f6e:	f7ff ffc7 	bl	8001f00 <__sinit>
 8001f72:	3648      	adds	r6, #72	; 0x48
 8001f74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	d503      	bpl.n	8001f84 <__sfp+0x24>
 8001f7c:	6833      	ldr	r3, [r6, #0]
 8001f7e:	b133      	cbz	r3, 8001f8e <__sfp+0x2e>
 8001f80:	6836      	ldr	r6, [r6, #0]
 8001f82:	e7f7      	b.n	8001f74 <__sfp+0x14>
 8001f84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001f88:	b16d      	cbz	r5, 8001fa6 <__sfp+0x46>
 8001f8a:	3468      	adds	r4, #104	; 0x68
 8001f8c:	e7f4      	b.n	8001f78 <__sfp+0x18>
 8001f8e:	2104      	movs	r1, #4
 8001f90:	4638      	mov	r0, r7
 8001f92:	f7ff ff9f 	bl	8001ed4 <__sfmoreglue>
 8001f96:	6030      	str	r0, [r6, #0]
 8001f98:	2800      	cmp	r0, #0
 8001f9a:	d1f1      	bne.n	8001f80 <__sfp+0x20>
 8001f9c:	230c      	movs	r3, #12
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	4604      	mov	r4, r0
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <__sfp+0x74>)
 8001fa8:	6665      	str	r5, [r4, #100]	; 0x64
 8001faa:	e9c4 5500 	strd	r5, r5, [r4]
 8001fae:	60a5      	str	r5, [r4, #8]
 8001fb0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001fb4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001fb8:	2208      	movs	r2, #8
 8001fba:	4629      	mov	r1, r5
 8001fbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001fc0:	f7ff fd6a 	bl	8001a98 <memset>
 8001fc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001fc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001fcc:	e7e9      	b.n	8001fa2 <__sfp+0x42>
 8001fce:	bf00      	nop
 8001fd0:	08002a28 	.word	0x08002a28
 8001fd4:	ffff0001 	.word	0xffff0001

08001fd8 <_fwalk_reent>:
 8001fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fdc:	4680      	mov	r8, r0
 8001fde:	4689      	mov	r9, r1
 8001fe0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001fe4:	2600      	movs	r6, #0
 8001fe6:	b914      	cbnz	r4, 8001fee <_fwalk_reent+0x16>
 8001fe8:	4630      	mov	r0, r6
 8001fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001ff2:	3f01      	subs	r7, #1
 8001ff4:	d501      	bpl.n	8001ffa <_fwalk_reent+0x22>
 8001ff6:	6824      	ldr	r4, [r4, #0]
 8001ff8:	e7f5      	b.n	8001fe6 <_fwalk_reent+0xe>
 8001ffa:	89ab      	ldrh	r3, [r5, #12]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d907      	bls.n	8002010 <_fwalk_reent+0x38>
 8002000:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002004:	3301      	adds	r3, #1
 8002006:	d003      	beq.n	8002010 <_fwalk_reent+0x38>
 8002008:	4629      	mov	r1, r5
 800200a:	4640      	mov	r0, r8
 800200c:	47c8      	blx	r9
 800200e:	4306      	orrs	r6, r0
 8002010:	3568      	adds	r5, #104	; 0x68
 8002012:	e7ee      	b.n	8001ff2 <_fwalk_reent+0x1a>

08002014 <__swhatbuf_r>:
 8002014:	b570      	push	{r4, r5, r6, lr}
 8002016:	460e      	mov	r6, r1
 8002018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800201c:	2900      	cmp	r1, #0
 800201e:	b096      	sub	sp, #88	; 0x58
 8002020:	4614      	mov	r4, r2
 8002022:	461d      	mov	r5, r3
 8002024:	da07      	bge.n	8002036 <__swhatbuf_r+0x22>
 8002026:	2300      	movs	r3, #0
 8002028:	602b      	str	r3, [r5, #0]
 800202a:	89b3      	ldrh	r3, [r6, #12]
 800202c:	061a      	lsls	r2, r3, #24
 800202e:	d410      	bmi.n	8002052 <__swhatbuf_r+0x3e>
 8002030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002034:	e00e      	b.n	8002054 <__swhatbuf_r+0x40>
 8002036:	466a      	mov	r2, sp
 8002038:	f000 fc36 	bl	80028a8 <_fstat_r>
 800203c:	2800      	cmp	r0, #0
 800203e:	dbf2      	blt.n	8002026 <__swhatbuf_r+0x12>
 8002040:	9a01      	ldr	r2, [sp, #4]
 8002042:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002046:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800204a:	425a      	negs	r2, r3
 800204c:	415a      	adcs	r2, r3
 800204e:	602a      	str	r2, [r5, #0]
 8002050:	e7ee      	b.n	8002030 <__swhatbuf_r+0x1c>
 8002052:	2340      	movs	r3, #64	; 0x40
 8002054:	2000      	movs	r0, #0
 8002056:	6023      	str	r3, [r4, #0]
 8002058:	b016      	add	sp, #88	; 0x58
 800205a:	bd70      	pop	{r4, r5, r6, pc}

0800205c <__smakebuf_r>:
 800205c:	898b      	ldrh	r3, [r1, #12]
 800205e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002060:	079d      	lsls	r5, r3, #30
 8002062:	4606      	mov	r6, r0
 8002064:	460c      	mov	r4, r1
 8002066:	d507      	bpl.n	8002078 <__smakebuf_r+0x1c>
 8002068:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800206c:	6023      	str	r3, [r4, #0]
 800206e:	6123      	str	r3, [r4, #16]
 8002070:	2301      	movs	r3, #1
 8002072:	6163      	str	r3, [r4, #20]
 8002074:	b002      	add	sp, #8
 8002076:	bd70      	pop	{r4, r5, r6, pc}
 8002078:	ab01      	add	r3, sp, #4
 800207a:	466a      	mov	r2, sp
 800207c:	f7ff ffca 	bl	8002014 <__swhatbuf_r>
 8002080:	9900      	ldr	r1, [sp, #0]
 8002082:	4605      	mov	r5, r0
 8002084:	4630      	mov	r0, r6
 8002086:	f000 f877 	bl	8002178 <_malloc_r>
 800208a:	b948      	cbnz	r0, 80020a0 <__smakebuf_r+0x44>
 800208c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002090:	059a      	lsls	r2, r3, #22
 8002092:	d4ef      	bmi.n	8002074 <__smakebuf_r+0x18>
 8002094:	f023 0303 	bic.w	r3, r3, #3
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	81a3      	strh	r3, [r4, #12]
 800209e:	e7e3      	b.n	8002068 <__smakebuf_r+0xc>
 80020a0:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <__smakebuf_r+0x7c>)
 80020a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80020a4:	89a3      	ldrh	r3, [r4, #12]
 80020a6:	6020      	str	r0, [r4, #0]
 80020a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ac:	81a3      	strh	r3, [r4, #12]
 80020ae:	9b00      	ldr	r3, [sp, #0]
 80020b0:	6163      	str	r3, [r4, #20]
 80020b2:	9b01      	ldr	r3, [sp, #4]
 80020b4:	6120      	str	r0, [r4, #16]
 80020b6:	b15b      	cbz	r3, 80020d0 <__smakebuf_r+0x74>
 80020b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020bc:	4630      	mov	r0, r6
 80020be:	f000 fc05 	bl	80028cc <_isatty_r>
 80020c2:	b128      	cbz	r0, 80020d0 <__smakebuf_r+0x74>
 80020c4:	89a3      	ldrh	r3, [r4, #12]
 80020c6:	f023 0303 	bic.w	r3, r3, #3
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	81a3      	strh	r3, [r4, #12]
 80020d0:	89a3      	ldrh	r3, [r4, #12]
 80020d2:	431d      	orrs	r5, r3
 80020d4:	81a5      	strh	r5, [r4, #12]
 80020d6:	e7cd      	b.n	8002074 <__smakebuf_r+0x18>
 80020d8:	08001ec9 	.word	0x08001ec9

080020dc <_free_r>:
 80020dc:	b538      	push	{r3, r4, r5, lr}
 80020de:	4605      	mov	r5, r0
 80020e0:	2900      	cmp	r1, #0
 80020e2:	d045      	beq.n	8002170 <_free_r+0x94>
 80020e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020e8:	1f0c      	subs	r4, r1, #4
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	bfb8      	it	lt
 80020ee:	18e4      	addlt	r4, r4, r3
 80020f0:	f000 fc0e 	bl	8002910 <__malloc_lock>
 80020f4:	4a1f      	ldr	r2, [pc, #124]	; (8002174 <_free_r+0x98>)
 80020f6:	6813      	ldr	r3, [r2, #0]
 80020f8:	4610      	mov	r0, r2
 80020fa:	b933      	cbnz	r3, 800210a <_free_r+0x2e>
 80020fc:	6063      	str	r3, [r4, #4]
 80020fe:	6014      	str	r4, [r2, #0]
 8002100:	4628      	mov	r0, r5
 8002102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002106:	f000 bc04 	b.w	8002912 <__malloc_unlock>
 800210a:	42a3      	cmp	r3, r4
 800210c:	d90c      	bls.n	8002128 <_free_r+0x4c>
 800210e:	6821      	ldr	r1, [r4, #0]
 8002110:	1862      	adds	r2, r4, r1
 8002112:	4293      	cmp	r3, r2
 8002114:	bf04      	itt	eq
 8002116:	681a      	ldreq	r2, [r3, #0]
 8002118:	685b      	ldreq	r3, [r3, #4]
 800211a:	6063      	str	r3, [r4, #4]
 800211c:	bf04      	itt	eq
 800211e:	1852      	addeq	r2, r2, r1
 8002120:	6022      	streq	r2, [r4, #0]
 8002122:	6004      	str	r4, [r0, #0]
 8002124:	e7ec      	b.n	8002100 <_free_r+0x24>
 8002126:	4613      	mov	r3, r2
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	b10a      	cbz	r2, 8002130 <_free_r+0x54>
 800212c:	42a2      	cmp	r2, r4
 800212e:	d9fa      	bls.n	8002126 <_free_r+0x4a>
 8002130:	6819      	ldr	r1, [r3, #0]
 8002132:	1858      	adds	r0, r3, r1
 8002134:	42a0      	cmp	r0, r4
 8002136:	d10b      	bne.n	8002150 <_free_r+0x74>
 8002138:	6820      	ldr	r0, [r4, #0]
 800213a:	4401      	add	r1, r0
 800213c:	1858      	adds	r0, r3, r1
 800213e:	4282      	cmp	r2, r0
 8002140:	6019      	str	r1, [r3, #0]
 8002142:	d1dd      	bne.n	8002100 <_free_r+0x24>
 8002144:	6810      	ldr	r0, [r2, #0]
 8002146:	6852      	ldr	r2, [r2, #4]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	4401      	add	r1, r0
 800214c:	6019      	str	r1, [r3, #0]
 800214e:	e7d7      	b.n	8002100 <_free_r+0x24>
 8002150:	d902      	bls.n	8002158 <_free_r+0x7c>
 8002152:	230c      	movs	r3, #12
 8002154:	602b      	str	r3, [r5, #0]
 8002156:	e7d3      	b.n	8002100 <_free_r+0x24>
 8002158:	6820      	ldr	r0, [r4, #0]
 800215a:	1821      	adds	r1, r4, r0
 800215c:	428a      	cmp	r2, r1
 800215e:	bf04      	itt	eq
 8002160:	6811      	ldreq	r1, [r2, #0]
 8002162:	6852      	ldreq	r2, [r2, #4]
 8002164:	6062      	str	r2, [r4, #4]
 8002166:	bf04      	itt	eq
 8002168:	1809      	addeq	r1, r1, r0
 800216a:	6021      	streq	r1, [r4, #0]
 800216c:	605c      	str	r4, [r3, #4]
 800216e:	e7c7      	b.n	8002100 <_free_r+0x24>
 8002170:	bd38      	pop	{r3, r4, r5, pc}
 8002172:	bf00      	nop
 8002174:	200000b0 	.word	0x200000b0

08002178 <_malloc_r>:
 8002178:	b570      	push	{r4, r5, r6, lr}
 800217a:	1ccd      	adds	r5, r1, #3
 800217c:	f025 0503 	bic.w	r5, r5, #3
 8002180:	3508      	adds	r5, #8
 8002182:	2d0c      	cmp	r5, #12
 8002184:	bf38      	it	cc
 8002186:	250c      	movcc	r5, #12
 8002188:	2d00      	cmp	r5, #0
 800218a:	4606      	mov	r6, r0
 800218c:	db01      	blt.n	8002192 <_malloc_r+0x1a>
 800218e:	42a9      	cmp	r1, r5
 8002190:	d903      	bls.n	800219a <_malloc_r+0x22>
 8002192:	230c      	movs	r3, #12
 8002194:	6033      	str	r3, [r6, #0]
 8002196:	2000      	movs	r0, #0
 8002198:	bd70      	pop	{r4, r5, r6, pc}
 800219a:	f000 fbb9 	bl	8002910 <__malloc_lock>
 800219e:	4a21      	ldr	r2, [pc, #132]	; (8002224 <_malloc_r+0xac>)
 80021a0:	6814      	ldr	r4, [r2, #0]
 80021a2:	4621      	mov	r1, r4
 80021a4:	b991      	cbnz	r1, 80021cc <_malloc_r+0x54>
 80021a6:	4c20      	ldr	r4, [pc, #128]	; (8002228 <_malloc_r+0xb0>)
 80021a8:	6823      	ldr	r3, [r4, #0]
 80021aa:	b91b      	cbnz	r3, 80021b4 <_malloc_r+0x3c>
 80021ac:	4630      	mov	r0, r6
 80021ae:	f000 fb05 	bl	80027bc <_sbrk_r>
 80021b2:	6020      	str	r0, [r4, #0]
 80021b4:	4629      	mov	r1, r5
 80021b6:	4630      	mov	r0, r6
 80021b8:	f000 fb00 	bl	80027bc <_sbrk_r>
 80021bc:	1c43      	adds	r3, r0, #1
 80021be:	d124      	bne.n	800220a <_malloc_r+0x92>
 80021c0:	230c      	movs	r3, #12
 80021c2:	6033      	str	r3, [r6, #0]
 80021c4:	4630      	mov	r0, r6
 80021c6:	f000 fba4 	bl	8002912 <__malloc_unlock>
 80021ca:	e7e4      	b.n	8002196 <_malloc_r+0x1e>
 80021cc:	680b      	ldr	r3, [r1, #0]
 80021ce:	1b5b      	subs	r3, r3, r5
 80021d0:	d418      	bmi.n	8002204 <_malloc_r+0x8c>
 80021d2:	2b0b      	cmp	r3, #11
 80021d4:	d90f      	bls.n	80021f6 <_malloc_r+0x7e>
 80021d6:	600b      	str	r3, [r1, #0]
 80021d8:	50cd      	str	r5, [r1, r3]
 80021da:	18cc      	adds	r4, r1, r3
 80021dc:	4630      	mov	r0, r6
 80021de:	f000 fb98 	bl	8002912 <__malloc_unlock>
 80021e2:	f104 000b 	add.w	r0, r4, #11
 80021e6:	1d23      	adds	r3, r4, #4
 80021e8:	f020 0007 	bic.w	r0, r0, #7
 80021ec:	1ac3      	subs	r3, r0, r3
 80021ee:	d0d3      	beq.n	8002198 <_malloc_r+0x20>
 80021f0:	425a      	negs	r2, r3
 80021f2:	50e2      	str	r2, [r4, r3]
 80021f4:	e7d0      	b.n	8002198 <_malloc_r+0x20>
 80021f6:	428c      	cmp	r4, r1
 80021f8:	684b      	ldr	r3, [r1, #4]
 80021fa:	bf16      	itet	ne
 80021fc:	6063      	strne	r3, [r4, #4]
 80021fe:	6013      	streq	r3, [r2, #0]
 8002200:	460c      	movne	r4, r1
 8002202:	e7eb      	b.n	80021dc <_malloc_r+0x64>
 8002204:	460c      	mov	r4, r1
 8002206:	6849      	ldr	r1, [r1, #4]
 8002208:	e7cc      	b.n	80021a4 <_malloc_r+0x2c>
 800220a:	1cc4      	adds	r4, r0, #3
 800220c:	f024 0403 	bic.w	r4, r4, #3
 8002210:	42a0      	cmp	r0, r4
 8002212:	d005      	beq.n	8002220 <_malloc_r+0xa8>
 8002214:	1a21      	subs	r1, r4, r0
 8002216:	4630      	mov	r0, r6
 8002218:	f000 fad0 	bl	80027bc <_sbrk_r>
 800221c:	3001      	adds	r0, #1
 800221e:	d0cf      	beq.n	80021c0 <_malloc_r+0x48>
 8002220:	6025      	str	r5, [r4, #0]
 8002222:	e7db      	b.n	80021dc <_malloc_r+0x64>
 8002224:	200000b0 	.word	0x200000b0
 8002228:	200000b4 	.word	0x200000b4

0800222c <__sfputc_r>:
 800222c:	6893      	ldr	r3, [r2, #8]
 800222e:	3b01      	subs	r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	b410      	push	{r4}
 8002234:	6093      	str	r3, [r2, #8]
 8002236:	da08      	bge.n	800224a <__sfputc_r+0x1e>
 8002238:	6994      	ldr	r4, [r2, #24]
 800223a:	42a3      	cmp	r3, r4
 800223c:	db01      	blt.n	8002242 <__sfputc_r+0x16>
 800223e:	290a      	cmp	r1, #10
 8002240:	d103      	bne.n	800224a <__sfputc_r+0x1e>
 8002242:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002246:	f7ff bcab 	b.w	8001ba0 <__swbuf_r>
 800224a:	6813      	ldr	r3, [r2, #0]
 800224c:	1c58      	adds	r0, r3, #1
 800224e:	6010      	str	r0, [r2, #0]
 8002250:	7019      	strb	r1, [r3, #0]
 8002252:	4608      	mov	r0, r1
 8002254:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002258:	4770      	bx	lr

0800225a <__sfputs_r>:
 800225a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800225c:	4606      	mov	r6, r0
 800225e:	460f      	mov	r7, r1
 8002260:	4614      	mov	r4, r2
 8002262:	18d5      	adds	r5, r2, r3
 8002264:	42ac      	cmp	r4, r5
 8002266:	d101      	bne.n	800226c <__sfputs_r+0x12>
 8002268:	2000      	movs	r0, #0
 800226a:	e007      	b.n	800227c <__sfputs_r+0x22>
 800226c:	463a      	mov	r2, r7
 800226e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002272:	4630      	mov	r0, r6
 8002274:	f7ff ffda 	bl	800222c <__sfputc_r>
 8002278:	1c43      	adds	r3, r0, #1
 800227a:	d1f3      	bne.n	8002264 <__sfputs_r+0xa>
 800227c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002280 <_vfiprintf_r>:
 8002280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002284:	460c      	mov	r4, r1
 8002286:	b09d      	sub	sp, #116	; 0x74
 8002288:	4617      	mov	r7, r2
 800228a:	461d      	mov	r5, r3
 800228c:	4606      	mov	r6, r0
 800228e:	b118      	cbz	r0, 8002298 <_vfiprintf_r+0x18>
 8002290:	6983      	ldr	r3, [r0, #24]
 8002292:	b90b      	cbnz	r3, 8002298 <_vfiprintf_r+0x18>
 8002294:	f7ff fe34 	bl	8001f00 <__sinit>
 8002298:	4b7c      	ldr	r3, [pc, #496]	; (800248c <_vfiprintf_r+0x20c>)
 800229a:	429c      	cmp	r4, r3
 800229c:	d158      	bne.n	8002350 <_vfiprintf_r+0xd0>
 800229e:	6874      	ldr	r4, [r6, #4]
 80022a0:	89a3      	ldrh	r3, [r4, #12]
 80022a2:	0718      	lsls	r0, r3, #28
 80022a4:	d55e      	bpl.n	8002364 <_vfiprintf_r+0xe4>
 80022a6:	6923      	ldr	r3, [r4, #16]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d05b      	beq.n	8002364 <_vfiprintf_r+0xe4>
 80022ac:	2300      	movs	r3, #0
 80022ae:	9309      	str	r3, [sp, #36]	; 0x24
 80022b0:	2320      	movs	r3, #32
 80022b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80022b6:	2330      	movs	r3, #48	; 0x30
 80022b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80022bc:	9503      	str	r5, [sp, #12]
 80022be:	f04f 0b01 	mov.w	fp, #1
 80022c2:	46b8      	mov	r8, r7
 80022c4:	4645      	mov	r5, r8
 80022c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80022ca:	b10b      	cbz	r3, 80022d0 <_vfiprintf_r+0x50>
 80022cc:	2b25      	cmp	r3, #37	; 0x25
 80022ce:	d154      	bne.n	800237a <_vfiprintf_r+0xfa>
 80022d0:	ebb8 0a07 	subs.w	sl, r8, r7
 80022d4:	d00b      	beq.n	80022ee <_vfiprintf_r+0x6e>
 80022d6:	4653      	mov	r3, sl
 80022d8:	463a      	mov	r2, r7
 80022da:	4621      	mov	r1, r4
 80022dc:	4630      	mov	r0, r6
 80022de:	f7ff ffbc 	bl	800225a <__sfputs_r>
 80022e2:	3001      	adds	r0, #1
 80022e4:	f000 80c2 	beq.w	800246c <_vfiprintf_r+0x1ec>
 80022e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022ea:	4453      	add	r3, sl
 80022ec:	9309      	str	r3, [sp, #36]	; 0x24
 80022ee:	f898 3000 	ldrb.w	r3, [r8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 80ba 	beq.w	800246c <_vfiprintf_r+0x1ec>
 80022f8:	2300      	movs	r3, #0
 80022fa:	f04f 32ff 	mov.w	r2, #4294967295
 80022fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002302:	9304      	str	r3, [sp, #16]
 8002304:	9307      	str	r3, [sp, #28]
 8002306:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800230a:	931a      	str	r3, [sp, #104]	; 0x68
 800230c:	46a8      	mov	r8, r5
 800230e:	2205      	movs	r2, #5
 8002310:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002314:	485e      	ldr	r0, [pc, #376]	; (8002490 <_vfiprintf_r+0x210>)
 8002316:	f7fd ff6b 	bl	80001f0 <memchr>
 800231a:	9b04      	ldr	r3, [sp, #16]
 800231c:	bb78      	cbnz	r0, 800237e <_vfiprintf_r+0xfe>
 800231e:	06d9      	lsls	r1, r3, #27
 8002320:	bf44      	itt	mi
 8002322:	2220      	movmi	r2, #32
 8002324:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002328:	071a      	lsls	r2, r3, #28
 800232a:	bf44      	itt	mi
 800232c:	222b      	movmi	r2, #43	; 0x2b
 800232e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002332:	782a      	ldrb	r2, [r5, #0]
 8002334:	2a2a      	cmp	r2, #42	; 0x2a
 8002336:	d02a      	beq.n	800238e <_vfiprintf_r+0x10e>
 8002338:	9a07      	ldr	r2, [sp, #28]
 800233a:	46a8      	mov	r8, r5
 800233c:	2000      	movs	r0, #0
 800233e:	250a      	movs	r5, #10
 8002340:	4641      	mov	r1, r8
 8002342:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002346:	3b30      	subs	r3, #48	; 0x30
 8002348:	2b09      	cmp	r3, #9
 800234a:	d969      	bls.n	8002420 <_vfiprintf_r+0x1a0>
 800234c:	b360      	cbz	r0, 80023a8 <_vfiprintf_r+0x128>
 800234e:	e024      	b.n	800239a <_vfiprintf_r+0x11a>
 8002350:	4b50      	ldr	r3, [pc, #320]	; (8002494 <_vfiprintf_r+0x214>)
 8002352:	429c      	cmp	r4, r3
 8002354:	d101      	bne.n	800235a <_vfiprintf_r+0xda>
 8002356:	68b4      	ldr	r4, [r6, #8]
 8002358:	e7a2      	b.n	80022a0 <_vfiprintf_r+0x20>
 800235a:	4b4f      	ldr	r3, [pc, #316]	; (8002498 <_vfiprintf_r+0x218>)
 800235c:	429c      	cmp	r4, r3
 800235e:	bf08      	it	eq
 8002360:	68f4      	ldreq	r4, [r6, #12]
 8002362:	e79d      	b.n	80022a0 <_vfiprintf_r+0x20>
 8002364:	4621      	mov	r1, r4
 8002366:	4630      	mov	r0, r6
 8002368:	f7ff fc6c 	bl	8001c44 <__swsetup_r>
 800236c:	2800      	cmp	r0, #0
 800236e:	d09d      	beq.n	80022ac <_vfiprintf_r+0x2c>
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	b01d      	add	sp, #116	; 0x74
 8002376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800237a:	46a8      	mov	r8, r5
 800237c:	e7a2      	b.n	80022c4 <_vfiprintf_r+0x44>
 800237e:	4a44      	ldr	r2, [pc, #272]	; (8002490 <_vfiprintf_r+0x210>)
 8002380:	1a80      	subs	r0, r0, r2
 8002382:	fa0b f000 	lsl.w	r0, fp, r0
 8002386:	4318      	orrs	r0, r3
 8002388:	9004      	str	r0, [sp, #16]
 800238a:	4645      	mov	r5, r8
 800238c:	e7be      	b.n	800230c <_vfiprintf_r+0x8c>
 800238e:	9a03      	ldr	r2, [sp, #12]
 8002390:	1d11      	adds	r1, r2, #4
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	9103      	str	r1, [sp, #12]
 8002396:	2a00      	cmp	r2, #0
 8002398:	db01      	blt.n	800239e <_vfiprintf_r+0x11e>
 800239a:	9207      	str	r2, [sp, #28]
 800239c:	e004      	b.n	80023a8 <_vfiprintf_r+0x128>
 800239e:	4252      	negs	r2, r2
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	9207      	str	r2, [sp, #28]
 80023a6:	9304      	str	r3, [sp, #16]
 80023a8:	f898 3000 	ldrb.w	r3, [r8]
 80023ac:	2b2e      	cmp	r3, #46	; 0x2e
 80023ae:	d10e      	bne.n	80023ce <_vfiprintf_r+0x14e>
 80023b0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80023b4:	2b2a      	cmp	r3, #42	; 0x2a
 80023b6:	d138      	bne.n	800242a <_vfiprintf_r+0x1aa>
 80023b8:	9b03      	ldr	r3, [sp, #12]
 80023ba:	1d1a      	adds	r2, r3, #4
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	9203      	str	r2, [sp, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	bfb8      	it	lt
 80023c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80023c8:	f108 0802 	add.w	r8, r8, #2
 80023cc:	9305      	str	r3, [sp, #20]
 80023ce:	4d33      	ldr	r5, [pc, #204]	; (800249c <_vfiprintf_r+0x21c>)
 80023d0:	f898 1000 	ldrb.w	r1, [r8]
 80023d4:	2203      	movs	r2, #3
 80023d6:	4628      	mov	r0, r5
 80023d8:	f7fd ff0a 	bl	80001f0 <memchr>
 80023dc:	b140      	cbz	r0, 80023f0 <_vfiprintf_r+0x170>
 80023de:	2340      	movs	r3, #64	; 0x40
 80023e0:	1b40      	subs	r0, r0, r5
 80023e2:	fa03 f000 	lsl.w	r0, r3, r0
 80023e6:	9b04      	ldr	r3, [sp, #16]
 80023e8:	4303      	orrs	r3, r0
 80023ea:	f108 0801 	add.w	r8, r8, #1
 80023ee:	9304      	str	r3, [sp, #16]
 80023f0:	f898 1000 	ldrb.w	r1, [r8]
 80023f4:	482a      	ldr	r0, [pc, #168]	; (80024a0 <_vfiprintf_r+0x220>)
 80023f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80023fa:	2206      	movs	r2, #6
 80023fc:	f108 0701 	add.w	r7, r8, #1
 8002400:	f7fd fef6 	bl	80001f0 <memchr>
 8002404:	2800      	cmp	r0, #0
 8002406:	d037      	beq.n	8002478 <_vfiprintf_r+0x1f8>
 8002408:	4b26      	ldr	r3, [pc, #152]	; (80024a4 <_vfiprintf_r+0x224>)
 800240a:	bb1b      	cbnz	r3, 8002454 <_vfiprintf_r+0x1d4>
 800240c:	9b03      	ldr	r3, [sp, #12]
 800240e:	3307      	adds	r3, #7
 8002410:	f023 0307 	bic.w	r3, r3, #7
 8002414:	3308      	adds	r3, #8
 8002416:	9303      	str	r3, [sp, #12]
 8002418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800241a:	444b      	add	r3, r9
 800241c:	9309      	str	r3, [sp, #36]	; 0x24
 800241e:	e750      	b.n	80022c2 <_vfiprintf_r+0x42>
 8002420:	fb05 3202 	mla	r2, r5, r2, r3
 8002424:	2001      	movs	r0, #1
 8002426:	4688      	mov	r8, r1
 8002428:	e78a      	b.n	8002340 <_vfiprintf_r+0xc0>
 800242a:	2300      	movs	r3, #0
 800242c:	f108 0801 	add.w	r8, r8, #1
 8002430:	9305      	str	r3, [sp, #20]
 8002432:	4619      	mov	r1, r3
 8002434:	250a      	movs	r5, #10
 8002436:	4640      	mov	r0, r8
 8002438:	f810 2b01 	ldrb.w	r2, [r0], #1
 800243c:	3a30      	subs	r2, #48	; 0x30
 800243e:	2a09      	cmp	r2, #9
 8002440:	d903      	bls.n	800244a <_vfiprintf_r+0x1ca>
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0c3      	beq.n	80023ce <_vfiprintf_r+0x14e>
 8002446:	9105      	str	r1, [sp, #20]
 8002448:	e7c1      	b.n	80023ce <_vfiprintf_r+0x14e>
 800244a:	fb05 2101 	mla	r1, r5, r1, r2
 800244e:	2301      	movs	r3, #1
 8002450:	4680      	mov	r8, r0
 8002452:	e7f0      	b.n	8002436 <_vfiprintf_r+0x1b6>
 8002454:	ab03      	add	r3, sp, #12
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	4622      	mov	r2, r4
 800245a:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <_vfiprintf_r+0x228>)
 800245c:	a904      	add	r1, sp, #16
 800245e:	4630      	mov	r0, r6
 8002460:	f3af 8000 	nop.w
 8002464:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002468:	4681      	mov	r9, r0
 800246a:	d1d5      	bne.n	8002418 <_vfiprintf_r+0x198>
 800246c:	89a3      	ldrh	r3, [r4, #12]
 800246e:	065b      	lsls	r3, r3, #25
 8002470:	f53f af7e 	bmi.w	8002370 <_vfiprintf_r+0xf0>
 8002474:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002476:	e77d      	b.n	8002374 <_vfiprintf_r+0xf4>
 8002478:	ab03      	add	r3, sp, #12
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	4622      	mov	r2, r4
 800247e:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <_vfiprintf_r+0x228>)
 8002480:	a904      	add	r1, sp, #16
 8002482:	4630      	mov	r0, r6
 8002484:	f000 f888 	bl	8002598 <_printf_i>
 8002488:	e7ec      	b.n	8002464 <_vfiprintf_r+0x1e4>
 800248a:	bf00      	nop
 800248c:	08002a4c 	.word	0x08002a4c
 8002490:	08002a8c 	.word	0x08002a8c
 8002494:	08002a6c 	.word	0x08002a6c
 8002498:	08002a2c 	.word	0x08002a2c
 800249c:	08002a92 	.word	0x08002a92
 80024a0:	08002a96 	.word	0x08002a96
 80024a4:	00000000 	.word	0x00000000
 80024a8:	0800225b 	.word	0x0800225b

080024ac <_printf_common>:
 80024ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024b0:	4691      	mov	r9, r2
 80024b2:	461f      	mov	r7, r3
 80024b4:	688a      	ldr	r2, [r1, #8]
 80024b6:	690b      	ldr	r3, [r1, #16]
 80024b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024bc:	4293      	cmp	r3, r2
 80024be:	bfb8      	it	lt
 80024c0:	4613      	movlt	r3, r2
 80024c2:	f8c9 3000 	str.w	r3, [r9]
 80024c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80024ca:	4606      	mov	r6, r0
 80024cc:	460c      	mov	r4, r1
 80024ce:	b112      	cbz	r2, 80024d6 <_printf_common+0x2a>
 80024d0:	3301      	adds	r3, #1
 80024d2:	f8c9 3000 	str.w	r3, [r9]
 80024d6:	6823      	ldr	r3, [r4, #0]
 80024d8:	0699      	lsls	r1, r3, #26
 80024da:	bf42      	ittt	mi
 80024dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80024e0:	3302      	addmi	r3, #2
 80024e2:	f8c9 3000 	strmi.w	r3, [r9]
 80024e6:	6825      	ldr	r5, [r4, #0]
 80024e8:	f015 0506 	ands.w	r5, r5, #6
 80024ec:	d107      	bne.n	80024fe <_printf_common+0x52>
 80024ee:	f104 0a19 	add.w	sl, r4, #25
 80024f2:	68e3      	ldr	r3, [r4, #12]
 80024f4:	f8d9 2000 	ldr.w	r2, [r9]
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	42ab      	cmp	r3, r5
 80024fc:	dc28      	bgt.n	8002550 <_printf_common+0xa4>
 80024fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002502:	6822      	ldr	r2, [r4, #0]
 8002504:	3300      	adds	r3, #0
 8002506:	bf18      	it	ne
 8002508:	2301      	movne	r3, #1
 800250a:	0692      	lsls	r2, r2, #26
 800250c:	d42d      	bmi.n	800256a <_printf_common+0xbe>
 800250e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002512:	4639      	mov	r1, r7
 8002514:	4630      	mov	r0, r6
 8002516:	47c0      	blx	r8
 8002518:	3001      	adds	r0, #1
 800251a:	d020      	beq.n	800255e <_printf_common+0xb2>
 800251c:	6823      	ldr	r3, [r4, #0]
 800251e:	68e5      	ldr	r5, [r4, #12]
 8002520:	f8d9 2000 	ldr.w	r2, [r9]
 8002524:	f003 0306 	and.w	r3, r3, #6
 8002528:	2b04      	cmp	r3, #4
 800252a:	bf08      	it	eq
 800252c:	1aad      	subeq	r5, r5, r2
 800252e:	68a3      	ldr	r3, [r4, #8]
 8002530:	6922      	ldr	r2, [r4, #16]
 8002532:	bf0c      	ite	eq
 8002534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002538:	2500      	movne	r5, #0
 800253a:	4293      	cmp	r3, r2
 800253c:	bfc4      	itt	gt
 800253e:	1a9b      	subgt	r3, r3, r2
 8002540:	18ed      	addgt	r5, r5, r3
 8002542:	f04f 0900 	mov.w	r9, #0
 8002546:	341a      	adds	r4, #26
 8002548:	454d      	cmp	r5, r9
 800254a:	d11a      	bne.n	8002582 <_printf_common+0xd6>
 800254c:	2000      	movs	r0, #0
 800254e:	e008      	b.n	8002562 <_printf_common+0xb6>
 8002550:	2301      	movs	r3, #1
 8002552:	4652      	mov	r2, sl
 8002554:	4639      	mov	r1, r7
 8002556:	4630      	mov	r0, r6
 8002558:	47c0      	blx	r8
 800255a:	3001      	adds	r0, #1
 800255c:	d103      	bne.n	8002566 <_printf_common+0xba>
 800255e:	f04f 30ff 	mov.w	r0, #4294967295
 8002562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002566:	3501      	adds	r5, #1
 8002568:	e7c3      	b.n	80024f2 <_printf_common+0x46>
 800256a:	18e1      	adds	r1, r4, r3
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	2030      	movs	r0, #48	; 0x30
 8002570:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002574:	4422      	add	r2, r4
 8002576:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800257a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800257e:	3302      	adds	r3, #2
 8002580:	e7c5      	b.n	800250e <_printf_common+0x62>
 8002582:	2301      	movs	r3, #1
 8002584:	4622      	mov	r2, r4
 8002586:	4639      	mov	r1, r7
 8002588:	4630      	mov	r0, r6
 800258a:	47c0      	blx	r8
 800258c:	3001      	adds	r0, #1
 800258e:	d0e6      	beq.n	800255e <_printf_common+0xb2>
 8002590:	f109 0901 	add.w	r9, r9, #1
 8002594:	e7d8      	b.n	8002548 <_printf_common+0x9c>
	...

08002598 <_printf_i>:
 8002598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800259c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80025a0:	460c      	mov	r4, r1
 80025a2:	7e09      	ldrb	r1, [r1, #24]
 80025a4:	b085      	sub	sp, #20
 80025a6:	296e      	cmp	r1, #110	; 0x6e
 80025a8:	4617      	mov	r7, r2
 80025aa:	4606      	mov	r6, r0
 80025ac:	4698      	mov	r8, r3
 80025ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80025b0:	f000 80b3 	beq.w	800271a <_printf_i+0x182>
 80025b4:	d822      	bhi.n	80025fc <_printf_i+0x64>
 80025b6:	2963      	cmp	r1, #99	; 0x63
 80025b8:	d036      	beq.n	8002628 <_printf_i+0x90>
 80025ba:	d80a      	bhi.n	80025d2 <_printf_i+0x3a>
 80025bc:	2900      	cmp	r1, #0
 80025be:	f000 80b9 	beq.w	8002734 <_printf_i+0x19c>
 80025c2:	2958      	cmp	r1, #88	; 0x58
 80025c4:	f000 8083 	beq.w	80026ce <_printf_i+0x136>
 80025c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80025d0:	e032      	b.n	8002638 <_printf_i+0xa0>
 80025d2:	2964      	cmp	r1, #100	; 0x64
 80025d4:	d001      	beq.n	80025da <_printf_i+0x42>
 80025d6:	2969      	cmp	r1, #105	; 0x69
 80025d8:	d1f6      	bne.n	80025c8 <_printf_i+0x30>
 80025da:	6820      	ldr	r0, [r4, #0]
 80025dc:	6813      	ldr	r3, [r2, #0]
 80025de:	0605      	lsls	r5, r0, #24
 80025e0:	f103 0104 	add.w	r1, r3, #4
 80025e4:	d52a      	bpl.n	800263c <_printf_i+0xa4>
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6011      	str	r1, [r2, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	da03      	bge.n	80025f6 <_printf_i+0x5e>
 80025ee:	222d      	movs	r2, #45	; 0x2d
 80025f0:	425b      	negs	r3, r3
 80025f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80025f6:	486f      	ldr	r0, [pc, #444]	; (80027b4 <_printf_i+0x21c>)
 80025f8:	220a      	movs	r2, #10
 80025fa:	e039      	b.n	8002670 <_printf_i+0xd8>
 80025fc:	2973      	cmp	r1, #115	; 0x73
 80025fe:	f000 809d 	beq.w	800273c <_printf_i+0x1a4>
 8002602:	d808      	bhi.n	8002616 <_printf_i+0x7e>
 8002604:	296f      	cmp	r1, #111	; 0x6f
 8002606:	d020      	beq.n	800264a <_printf_i+0xb2>
 8002608:	2970      	cmp	r1, #112	; 0x70
 800260a:	d1dd      	bne.n	80025c8 <_printf_i+0x30>
 800260c:	6823      	ldr	r3, [r4, #0]
 800260e:	f043 0320 	orr.w	r3, r3, #32
 8002612:	6023      	str	r3, [r4, #0]
 8002614:	e003      	b.n	800261e <_printf_i+0x86>
 8002616:	2975      	cmp	r1, #117	; 0x75
 8002618:	d017      	beq.n	800264a <_printf_i+0xb2>
 800261a:	2978      	cmp	r1, #120	; 0x78
 800261c:	d1d4      	bne.n	80025c8 <_printf_i+0x30>
 800261e:	2378      	movs	r3, #120	; 0x78
 8002620:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002624:	4864      	ldr	r0, [pc, #400]	; (80027b8 <_printf_i+0x220>)
 8002626:	e055      	b.n	80026d4 <_printf_i+0x13c>
 8002628:	6813      	ldr	r3, [r2, #0]
 800262a:	1d19      	adds	r1, r3, #4
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6011      	str	r1, [r2, #0]
 8002630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002638:	2301      	movs	r3, #1
 800263a:	e08c      	b.n	8002756 <_printf_i+0x1be>
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6011      	str	r1, [r2, #0]
 8002640:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002644:	bf18      	it	ne
 8002646:	b21b      	sxthne	r3, r3
 8002648:	e7cf      	b.n	80025ea <_printf_i+0x52>
 800264a:	6813      	ldr	r3, [r2, #0]
 800264c:	6825      	ldr	r5, [r4, #0]
 800264e:	1d18      	adds	r0, r3, #4
 8002650:	6010      	str	r0, [r2, #0]
 8002652:	0628      	lsls	r0, r5, #24
 8002654:	d501      	bpl.n	800265a <_printf_i+0xc2>
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	e002      	b.n	8002660 <_printf_i+0xc8>
 800265a:	0668      	lsls	r0, r5, #25
 800265c:	d5fb      	bpl.n	8002656 <_printf_i+0xbe>
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	4854      	ldr	r0, [pc, #336]	; (80027b4 <_printf_i+0x21c>)
 8002662:	296f      	cmp	r1, #111	; 0x6f
 8002664:	bf14      	ite	ne
 8002666:	220a      	movne	r2, #10
 8002668:	2208      	moveq	r2, #8
 800266a:	2100      	movs	r1, #0
 800266c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002670:	6865      	ldr	r5, [r4, #4]
 8002672:	60a5      	str	r5, [r4, #8]
 8002674:	2d00      	cmp	r5, #0
 8002676:	f2c0 8095 	blt.w	80027a4 <_printf_i+0x20c>
 800267a:	6821      	ldr	r1, [r4, #0]
 800267c:	f021 0104 	bic.w	r1, r1, #4
 8002680:	6021      	str	r1, [r4, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d13d      	bne.n	8002702 <_printf_i+0x16a>
 8002686:	2d00      	cmp	r5, #0
 8002688:	f040 808e 	bne.w	80027a8 <_printf_i+0x210>
 800268c:	4665      	mov	r5, ip
 800268e:	2a08      	cmp	r2, #8
 8002690:	d10b      	bne.n	80026aa <_printf_i+0x112>
 8002692:	6823      	ldr	r3, [r4, #0]
 8002694:	07db      	lsls	r3, r3, #31
 8002696:	d508      	bpl.n	80026aa <_printf_i+0x112>
 8002698:	6923      	ldr	r3, [r4, #16]
 800269a:	6862      	ldr	r2, [r4, #4]
 800269c:	429a      	cmp	r2, r3
 800269e:	bfde      	ittt	le
 80026a0:	2330      	movle	r3, #48	; 0x30
 80026a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80026a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80026aa:	ebac 0305 	sub.w	r3, ip, r5
 80026ae:	6123      	str	r3, [r4, #16]
 80026b0:	f8cd 8000 	str.w	r8, [sp]
 80026b4:	463b      	mov	r3, r7
 80026b6:	aa03      	add	r2, sp, #12
 80026b8:	4621      	mov	r1, r4
 80026ba:	4630      	mov	r0, r6
 80026bc:	f7ff fef6 	bl	80024ac <_printf_common>
 80026c0:	3001      	adds	r0, #1
 80026c2:	d14d      	bne.n	8002760 <_printf_i+0x1c8>
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295
 80026c8:	b005      	add	sp, #20
 80026ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80026ce:	4839      	ldr	r0, [pc, #228]	; (80027b4 <_printf_i+0x21c>)
 80026d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80026d4:	6813      	ldr	r3, [r2, #0]
 80026d6:	6821      	ldr	r1, [r4, #0]
 80026d8:	1d1d      	adds	r5, r3, #4
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6015      	str	r5, [r2, #0]
 80026de:	060a      	lsls	r2, r1, #24
 80026e0:	d50b      	bpl.n	80026fa <_printf_i+0x162>
 80026e2:	07ca      	lsls	r2, r1, #31
 80026e4:	bf44      	itt	mi
 80026e6:	f041 0120 	orrmi.w	r1, r1, #32
 80026ea:	6021      	strmi	r1, [r4, #0]
 80026ec:	b91b      	cbnz	r3, 80026f6 <_printf_i+0x15e>
 80026ee:	6822      	ldr	r2, [r4, #0]
 80026f0:	f022 0220 	bic.w	r2, r2, #32
 80026f4:	6022      	str	r2, [r4, #0]
 80026f6:	2210      	movs	r2, #16
 80026f8:	e7b7      	b.n	800266a <_printf_i+0xd2>
 80026fa:	064d      	lsls	r5, r1, #25
 80026fc:	bf48      	it	mi
 80026fe:	b29b      	uxthmi	r3, r3
 8002700:	e7ef      	b.n	80026e2 <_printf_i+0x14a>
 8002702:	4665      	mov	r5, ip
 8002704:	fbb3 f1f2 	udiv	r1, r3, r2
 8002708:	fb02 3311 	mls	r3, r2, r1, r3
 800270c:	5cc3      	ldrb	r3, [r0, r3]
 800270e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002712:	460b      	mov	r3, r1
 8002714:	2900      	cmp	r1, #0
 8002716:	d1f5      	bne.n	8002704 <_printf_i+0x16c>
 8002718:	e7b9      	b.n	800268e <_printf_i+0xf6>
 800271a:	6813      	ldr	r3, [r2, #0]
 800271c:	6825      	ldr	r5, [r4, #0]
 800271e:	6961      	ldr	r1, [r4, #20]
 8002720:	1d18      	adds	r0, r3, #4
 8002722:	6010      	str	r0, [r2, #0]
 8002724:	0628      	lsls	r0, r5, #24
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	d501      	bpl.n	800272e <_printf_i+0x196>
 800272a:	6019      	str	r1, [r3, #0]
 800272c:	e002      	b.n	8002734 <_printf_i+0x19c>
 800272e:	066a      	lsls	r2, r5, #25
 8002730:	d5fb      	bpl.n	800272a <_printf_i+0x192>
 8002732:	8019      	strh	r1, [r3, #0]
 8002734:	2300      	movs	r3, #0
 8002736:	6123      	str	r3, [r4, #16]
 8002738:	4665      	mov	r5, ip
 800273a:	e7b9      	b.n	80026b0 <_printf_i+0x118>
 800273c:	6813      	ldr	r3, [r2, #0]
 800273e:	1d19      	adds	r1, r3, #4
 8002740:	6011      	str	r1, [r2, #0]
 8002742:	681d      	ldr	r5, [r3, #0]
 8002744:	6862      	ldr	r2, [r4, #4]
 8002746:	2100      	movs	r1, #0
 8002748:	4628      	mov	r0, r5
 800274a:	f7fd fd51 	bl	80001f0 <memchr>
 800274e:	b108      	cbz	r0, 8002754 <_printf_i+0x1bc>
 8002750:	1b40      	subs	r0, r0, r5
 8002752:	6060      	str	r0, [r4, #4]
 8002754:	6863      	ldr	r3, [r4, #4]
 8002756:	6123      	str	r3, [r4, #16]
 8002758:	2300      	movs	r3, #0
 800275a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800275e:	e7a7      	b.n	80026b0 <_printf_i+0x118>
 8002760:	6923      	ldr	r3, [r4, #16]
 8002762:	462a      	mov	r2, r5
 8002764:	4639      	mov	r1, r7
 8002766:	4630      	mov	r0, r6
 8002768:	47c0      	blx	r8
 800276a:	3001      	adds	r0, #1
 800276c:	d0aa      	beq.n	80026c4 <_printf_i+0x12c>
 800276e:	6823      	ldr	r3, [r4, #0]
 8002770:	079b      	lsls	r3, r3, #30
 8002772:	d413      	bmi.n	800279c <_printf_i+0x204>
 8002774:	68e0      	ldr	r0, [r4, #12]
 8002776:	9b03      	ldr	r3, [sp, #12]
 8002778:	4298      	cmp	r0, r3
 800277a:	bfb8      	it	lt
 800277c:	4618      	movlt	r0, r3
 800277e:	e7a3      	b.n	80026c8 <_printf_i+0x130>
 8002780:	2301      	movs	r3, #1
 8002782:	464a      	mov	r2, r9
 8002784:	4639      	mov	r1, r7
 8002786:	4630      	mov	r0, r6
 8002788:	47c0      	blx	r8
 800278a:	3001      	adds	r0, #1
 800278c:	d09a      	beq.n	80026c4 <_printf_i+0x12c>
 800278e:	3501      	adds	r5, #1
 8002790:	68e3      	ldr	r3, [r4, #12]
 8002792:	9a03      	ldr	r2, [sp, #12]
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	42ab      	cmp	r3, r5
 8002798:	dcf2      	bgt.n	8002780 <_printf_i+0x1e8>
 800279a:	e7eb      	b.n	8002774 <_printf_i+0x1dc>
 800279c:	2500      	movs	r5, #0
 800279e:	f104 0919 	add.w	r9, r4, #25
 80027a2:	e7f5      	b.n	8002790 <_printf_i+0x1f8>
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1ac      	bne.n	8002702 <_printf_i+0x16a>
 80027a8:	7803      	ldrb	r3, [r0, #0]
 80027aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027b2:	e76c      	b.n	800268e <_printf_i+0xf6>
 80027b4:	08002a9d 	.word	0x08002a9d
 80027b8:	08002aae 	.word	0x08002aae

080027bc <_sbrk_r>:
 80027bc:	b538      	push	{r3, r4, r5, lr}
 80027be:	4c06      	ldr	r4, [pc, #24]	; (80027d8 <_sbrk_r+0x1c>)
 80027c0:	2300      	movs	r3, #0
 80027c2:	4605      	mov	r5, r0
 80027c4:	4608      	mov	r0, r1
 80027c6:	6023      	str	r3, [r4, #0]
 80027c8:	f7fd ff96 	bl	80006f8 <_sbrk>
 80027cc:	1c43      	adds	r3, r0, #1
 80027ce:	d102      	bne.n	80027d6 <_sbrk_r+0x1a>
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	b103      	cbz	r3, 80027d6 <_sbrk_r+0x1a>
 80027d4:	602b      	str	r3, [r5, #0]
 80027d6:	bd38      	pop	{r3, r4, r5, pc}
 80027d8:	200000e0 	.word	0x200000e0

080027dc <__sread>:
 80027dc:	b510      	push	{r4, lr}
 80027de:	460c      	mov	r4, r1
 80027e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027e4:	f000 f896 	bl	8002914 <_read_r>
 80027e8:	2800      	cmp	r0, #0
 80027ea:	bfab      	itete	ge
 80027ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80027ee:	89a3      	ldrhlt	r3, [r4, #12]
 80027f0:	181b      	addge	r3, r3, r0
 80027f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80027f6:	bfac      	ite	ge
 80027f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80027fa:	81a3      	strhlt	r3, [r4, #12]
 80027fc:	bd10      	pop	{r4, pc}

080027fe <__swrite>:
 80027fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002802:	461f      	mov	r7, r3
 8002804:	898b      	ldrh	r3, [r1, #12]
 8002806:	05db      	lsls	r3, r3, #23
 8002808:	4605      	mov	r5, r0
 800280a:	460c      	mov	r4, r1
 800280c:	4616      	mov	r6, r2
 800280e:	d505      	bpl.n	800281c <__swrite+0x1e>
 8002810:	2302      	movs	r3, #2
 8002812:	2200      	movs	r2, #0
 8002814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002818:	f000 f868 	bl	80028ec <_lseek_r>
 800281c:	89a3      	ldrh	r3, [r4, #12]
 800281e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002826:	81a3      	strh	r3, [r4, #12]
 8002828:	4632      	mov	r2, r6
 800282a:	463b      	mov	r3, r7
 800282c:	4628      	mov	r0, r5
 800282e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002832:	f000 b817 	b.w	8002864 <_write_r>

08002836 <__sseek>:
 8002836:	b510      	push	{r4, lr}
 8002838:	460c      	mov	r4, r1
 800283a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800283e:	f000 f855 	bl	80028ec <_lseek_r>
 8002842:	1c43      	adds	r3, r0, #1
 8002844:	89a3      	ldrh	r3, [r4, #12]
 8002846:	bf15      	itete	ne
 8002848:	6560      	strne	r0, [r4, #84]	; 0x54
 800284a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800284e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002852:	81a3      	strheq	r3, [r4, #12]
 8002854:	bf18      	it	ne
 8002856:	81a3      	strhne	r3, [r4, #12]
 8002858:	bd10      	pop	{r4, pc}

0800285a <__sclose>:
 800285a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800285e:	f000 b813 	b.w	8002888 <_close_r>
	...

08002864 <_write_r>:
 8002864:	b538      	push	{r3, r4, r5, lr}
 8002866:	4c07      	ldr	r4, [pc, #28]	; (8002884 <_write_r+0x20>)
 8002868:	4605      	mov	r5, r0
 800286a:	4608      	mov	r0, r1
 800286c:	4611      	mov	r1, r2
 800286e:	2200      	movs	r2, #0
 8002870:	6022      	str	r2, [r4, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	f7fd feef 	bl	8000656 <_write>
 8002878:	1c43      	adds	r3, r0, #1
 800287a:	d102      	bne.n	8002882 <_write_r+0x1e>
 800287c:	6823      	ldr	r3, [r4, #0]
 800287e:	b103      	cbz	r3, 8002882 <_write_r+0x1e>
 8002880:	602b      	str	r3, [r5, #0]
 8002882:	bd38      	pop	{r3, r4, r5, pc}
 8002884:	200000e0 	.word	0x200000e0

08002888 <_close_r>:
 8002888:	b538      	push	{r3, r4, r5, lr}
 800288a:	4c06      	ldr	r4, [pc, #24]	; (80028a4 <_close_r+0x1c>)
 800288c:	2300      	movs	r3, #0
 800288e:	4605      	mov	r5, r0
 8002890:	4608      	mov	r0, r1
 8002892:	6023      	str	r3, [r4, #0]
 8002894:	f7fd fefb 	bl	800068e <_close>
 8002898:	1c43      	adds	r3, r0, #1
 800289a:	d102      	bne.n	80028a2 <_close_r+0x1a>
 800289c:	6823      	ldr	r3, [r4, #0]
 800289e:	b103      	cbz	r3, 80028a2 <_close_r+0x1a>
 80028a0:	602b      	str	r3, [r5, #0]
 80028a2:	bd38      	pop	{r3, r4, r5, pc}
 80028a4:	200000e0 	.word	0x200000e0

080028a8 <_fstat_r>:
 80028a8:	b538      	push	{r3, r4, r5, lr}
 80028aa:	4c07      	ldr	r4, [pc, #28]	; (80028c8 <_fstat_r+0x20>)
 80028ac:	2300      	movs	r3, #0
 80028ae:	4605      	mov	r5, r0
 80028b0:	4608      	mov	r0, r1
 80028b2:	4611      	mov	r1, r2
 80028b4:	6023      	str	r3, [r4, #0]
 80028b6:	f7fd fef6 	bl	80006a6 <_fstat>
 80028ba:	1c43      	adds	r3, r0, #1
 80028bc:	d102      	bne.n	80028c4 <_fstat_r+0x1c>
 80028be:	6823      	ldr	r3, [r4, #0]
 80028c0:	b103      	cbz	r3, 80028c4 <_fstat_r+0x1c>
 80028c2:	602b      	str	r3, [r5, #0]
 80028c4:	bd38      	pop	{r3, r4, r5, pc}
 80028c6:	bf00      	nop
 80028c8:	200000e0 	.word	0x200000e0

080028cc <_isatty_r>:
 80028cc:	b538      	push	{r3, r4, r5, lr}
 80028ce:	4c06      	ldr	r4, [pc, #24]	; (80028e8 <_isatty_r+0x1c>)
 80028d0:	2300      	movs	r3, #0
 80028d2:	4605      	mov	r5, r0
 80028d4:	4608      	mov	r0, r1
 80028d6:	6023      	str	r3, [r4, #0]
 80028d8:	f7fd fef5 	bl	80006c6 <_isatty>
 80028dc:	1c43      	adds	r3, r0, #1
 80028de:	d102      	bne.n	80028e6 <_isatty_r+0x1a>
 80028e0:	6823      	ldr	r3, [r4, #0]
 80028e2:	b103      	cbz	r3, 80028e6 <_isatty_r+0x1a>
 80028e4:	602b      	str	r3, [r5, #0]
 80028e6:	bd38      	pop	{r3, r4, r5, pc}
 80028e8:	200000e0 	.word	0x200000e0

080028ec <_lseek_r>:
 80028ec:	b538      	push	{r3, r4, r5, lr}
 80028ee:	4c07      	ldr	r4, [pc, #28]	; (800290c <_lseek_r+0x20>)
 80028f0:	4605      	mov	r5, r0
 80028f2:	4608      	mov	r0, r1
 80028f4:	4611      	mov	r1, r2
 80028f6:	2200      	movs	r2, #0
 80028f8:	6022      	str	r2, [r4, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f7fd feee 	bl	80006dc <_lseek>
 8002900:	1c43      	adds	r3, r0, #1
 8002902:	d102      	bne.n	800290a <_lseek_r+0x1e>
 8002904:	6823      	ldr	r3, [r4, #0]
 8002906:	b103      	cbz	r3, 800290a <_lseek_r+0x1e>
 8002908:	602b      	str	r3, [r5, #0]
 800290a:	bd38      	pop	{r3, r4, r5, pc}
 800290c:	200000e0 	.word	0x200000e0

08002910 <__malloc_lock>:
 8002910:	4770      	bx	lr

08002912 <__malloc_unlock>:
 8002912:	4770      	bx	lr

08002914 <_read_r>:
 8002914:	b538      	push	{r3, r4, r5, lr}
 8002916:	4c07      	ldr	r4, [pc, #28]	; (8002934 <_read_r+0x20>)
 8002918:	4605      	mov	r5, r0
 800291a:	4608      	mov	r0, r1
 800291c:	4611      	mov	r1, r2
 800291e:	2200      	movs	r2, #0
 8002920:	6022      	str	r2, [r4, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	f7fd fe7a 	bl	800061c <_read>
 8002928:	1c43      	adds	r3, r0, #1
 800292a:	d102      	bne.n	8002932 <_read_r+0x1e>
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	b103      	cbz	r3, 8002932 <_read_r+0x1e>
 8002930:	602b      	str	r3, [r5, #0]
 8002932:	bd38      	pop	{r3, r4, r5, pc}
 8002934:	200000e0 	.word	0x200000e0

08002938 <_init>:
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293a:	bf00      	nop
 800293c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293e:	bc08      	pop	{r3}
 8002940:	469e      	mov	lr, r3
 8002942:	4770      	bx	lr

08002944 <_fini>:
 8002944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002946:	bf00      	nop
 8002948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294a:	bc08      	pop	{r3}
 800294c:	469e      	mov	lr, r3
 800294e:	4770      	bx	lr
